"""This file is generated by "data/build_code.py"
It has been set to read only so that you don't edit it without using
build_code.py.
"""

from sqlalchemy import Column, Integer, String
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship

from base_classes import Base

ATTRIBUTE_INFORMATION = [
    ("Agility", "A measure of how skilfully you can move."),
    ("Brawn", "A measure of how strong you are."),
    ("Charisma", "A measure of how well you interact with other people"),
    ("Divinity", "A measure of your connection with the spirit world."),
    ("Fortuity", "A measure of your luck."),
    ("Intellect", "A measure of your mental prowess and knowledge."),
    ("Pathfinding", "A measure of your ability to traverse the world."),
    ("Quickness", "A measure of how fast you can move."),
    ("Resilience", "A measure of how tough you are."),
    ("Survivalism", "A measure of how well you can adapt to your surroundings."),
    ("Vitality", "A measure of how healthy you are."),
    ("Willpower", "A measure of how disciplined you are.")
]

ALL_ATTRIBUTES = [attrib[0].lower() for attrib in ATTRIBUTE_INFORMATION]


class Attributes(Base):
    __tablename__ = 'attributes'
    
    id = Column(Integer, primary_key=True)

    # Relationships
    # Hero class is one to one.
    hero_id = Column(Integer, ForeignKey('hero.id'))

    # Attribute class
    agility_id = Column(Integer, ForeignKey('attribute.id'))
    agility = relationship("Attribute", uselist=False, foreign_keys="[Attributes.agility_id]")
    brawn_id = Column(Integer, ForeignKey('attribute.id'))
    brawn = relationship("Attribute", uselist=False, foreign_keys="[Attributes.brawn_id]")
    charisma_id = Column(Integer, ForeignKey('attribute.id'))
    charisma = relationship("Attribute", uselist=False, foreign_keys="[Attributes.charisma_id]")
    divinity_id = Column(Integer, ForeignKey('attribute.id'))
    divinity = relationship("Attribute", uselist=False, foreign_keys="[Attributes.divinity_id]")
    fortuity_id = Column(Integer, ForeignKey('attribute.id'))
    fortuity = relationship("Attribute", uselist=False, foreign_keys="[Attributes.fortuity_id]")
    intellect_id = Column(Integer, ForeignKey('attribute.id'))
    intellect = relationship("Attribute", uselist=False, foreign_keys="[Attributes.intellect_id]")
    pathfinding_id = Column(Integer, ForeignKey('attribute.id'))
    pathfinding = relationship("Attribute", uselist=False, foreign_keys="[Attributes.pathfinding_id]")
    quickness_id = Column(Integer, ForeignKey('attribute.id'))
    quickness = relationship("Attribute", uselist=False, foreign_keys="[Attributes.quickness_id]")
    resilience_id = Column(Integer, ForeignKey('attribute.id'))
    resilience = relationship("Attribute", uselist=False, foreign_keys="[Attributes.resilience_id]")
    survivalism_id = Column(Integer, ForeignKey('attribute.id'))
    survivalism = relationship("Attribute", uselist=False, foreign_keys="[Attributes.survivalism_id]")
    vitality_id = Column(Integer, ForeignKey('attribute.id'))
    vitality = relationship("Attribute", uselist=False, foreign_keys="[Attributes.vitality_id]")
    willpower_id = Column(Integer, ForeignKey('attribute.id'))
    willpower = relationship("Attribute", uselist=False, foreign_keys="[Attributes.willpower_id]")

    # Hero class
    # One Hero -> one Attributes object
    hero = relationship("Hero", back_populates='attributes', uselist=False)

    def __init__(self):
        
        self.agility = Attribute("Agility", "A measure of how skilfully you can move.")
        self.brawn = Attribute("Brawn", "A measure of how strong you are.")
        self.charisma = Attribute("Charisma", "A measure of how well you interact with other people")
        self.divinity = Attribute("Divinity", "A measure of your connection with the spirit world.")
        self.fortuity = Attribute("Fortuity", "A measure of your luck.")
        self.intellect = Attribute("Intellect", "A measure of your mental prowess and knowledge.")
        self.pathfinding = Attribute("Pathfinding", "A measure of your ability to traverse the world.")
        self.quickness = Attribute("Quickness", "A measure of how fast you can move.")
        self.resilience = Attribute("Resilience", "A measure of how tough you are.")
        self.survivalism = Attribute("Survivalism", "A measure of how well you can adapt to your surroundings.")
        self.vitality = Attribute("Vitality", "A measure of how healthy you are.")
        self.willpower = Attribute("Willpower", "A measure of how disciplined you are.")
        

    def items(self):
        """Returns a list of 2-tuples

        Basically a dict.items() clone that looks like ([(key, value), (key, value), ...])
        """
        return ((key, getattr(self, key)) for key in ALL_ATTRIBUTES)
        
        
    def __iter__(self):
        return (getattr(self, key) for key in ALL_ATTRIBUTES)

        
class Attribute(Base):
    """Attribute class that stores data about a hero object.
    """
    __tablename__ = "attribute"
    
    id = Column(Integer, primary_key=True)

    name = Column(String(50))
    description = Column(String(100))
    level = Column(Integer)
    
    def __init__(self, name, description):
        """Build the initial Attribute object.
        
        Set all values to 1.
        """
        
        self.name = name
        self.description = description
        self.level = 1
