"""This file is generated by "data/build_code.py"
It has been set to read only so that you don't edit it without using
build_code.py.
"""

from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship

from base_classes import Base

PROFICIENCY_INFORMATION = [
    ("Attack damage", "", "Strength", "Offense"),
    ("Attack speed", "", "Agility", "Offense"),
    ("Attack accuracy", "", "Agility", "Offense"),
    ("First strike", "", "Agility", "Offense"),
    ("Critical hit", "", "Agility", "Offense"),
    ("Defence", "", "Endurance", "Defence"),
    ("Evade", "", "Strength", "Defence"),
    ("Parry", "", "Strength", "Defence"),
    ("Riposte", "", "Strength", "Defence"),
    ("Block", "", "Strength", "Defence"),
    ("Stealth", "", "Strength", "Stealth"),
    ("Pickpocketing", "", "Strength", "Stealth"),
    ("Faith", "", "Strength", "Holiness"),
    ("Bartering", "", "Strength", "Diplomacy"),
    ("Oration", "", "Strength", "Diplomacy"),
    ("Knowledge", "", "Strength", "Diplomacy"),
    ("Resist frost", "", "Strength", "Resistance"),
    ("Resist flame", "", "Strength", "Resistance"),
    ("Resist shadow", "", "Strength", "Resistance"),
    ("Resist holy", "", "Strength", "Resistance"),
    ("Resist blunt", "", "Strength", "Resistance"),
    ("Resist slashing", "", "Strength", "Resistance"),
    ("Resist piercing", "", "Strength", "Resistance")
]

ALL_PROFICIENCIES = [attrib[0].lower().replace(" ", "_") for attrib in PROFICIENCY_INFORMATION]

class Proficiencies(Base):
    __tablename__ = 'proficiencies'
    
    id = Column(Integer, primary_key=True)

    #Relationships
    attack_damage_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_damage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_damage_id]")
    attack_speed_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_speed = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_speed_id]")
    attack_accuracy_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_accuracy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_accuracy_id]")
    first_strike_id = Column(Integer, ForeignKey('proficiency.id'))
    first_strike = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.first_strike_id]")
    critical_hit_id = Column(Integer, ForeignKey('proficiency.id'))
    critical_hit = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.critical_hit_id]")
    defence_id = Column(Integer, ForeignKey('proficiency.id'))
    defence = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.defence_id]")
    evade_id = Column(Integer, ForeignKey('proficiency.id'))
    evade = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.evade_id]")
    parry_id = Column(Integer, ForeignKey('proficiency.id'))
    parry = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.parry_id]")
    riposte_id = Column(Integer, ForeignKey('proficiency.id'))
    riposte = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.riposte_id]")
    block_id = Column(Integer, ForeignKey('proficiency.id'))
    block = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.block_id]")
    stealth_id = Column(Integer, ForeignKey('proficiency.id'))
    stealth = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.stealth_id]")
    pickpocketing_id = Column(Integer, ForeignKey('proficiency.id'))
    pickpocketing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.pickpocketing_id]")
    faith_id = Column(Integer, ForeignKey('proficiency.id'))
    faith = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.faith_id]")
    bartering_id = Column(Integer, ForeignKey('proficiency.id'))
    bartering = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.bartering_id]")
    oration_id = Column(Integer, ForeignKey('proficiency.id'))
    oration = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.oration_id]")
    knowledge_id = Column(Integer, ForeignKey('proficiency.id'))
    knowledge = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.knowledge_id]")
    resist_frost_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_frost = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_frost_id]")
    resist_flame_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_flame = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_flame_id]")
    resist_shadow_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_shadow = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_shadow_id]")
    resist_holy_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_holy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_holy_id]")
    resist_blunt_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_blunt = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_blunt_id]")
    resist_slashing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_slashing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_slashing_id]")
    resist_piercing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_piercing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_piercing_id]")
    
    def __init__(self):
        
        self.attack_damage = Proficiency("Attack damage", "", "Strength", "Offense")
        self.attack_speed = Proficiency("Attack speed", "", "Agility", "Offense")
        self.attack_accuracy = Proficiency("Attack accuracy", "", "Agility", "Offense")
        self.first_strike = Proficiency("First strike", "", "Agility", "Offense")
        self.critical_hit = Proficiency("Critical hit", "", "Agility", "Offense")
        self.defence = Proficiency("Defence", "", "Endurance", "Defence")
        self.evade = Proficiency("Evade", "", "Strength", "Defence")
        self.parry = Proficiency("Parry", "", "Strength", "Defence")
        self.riposte = Proficiency("Riposte", "", "Strength", "Defence")
        self.block = Proficiency("Block", "", "Strength", "Defence")
        self.stealth = Proficiency("Stealth", "", "Strength", "Stealth")
        self.pickpocketing = Proficiency("Pickpocketing", "", "Strength", "Stealth")
        self.faith = Proficiency("Faith", "", "Strength", "Holiness")
        self.bartering = Proficiency("Bartering", "", "Strength", "Diplomacy")
        self.oration = Proficiency("Oration", "", "Strength", "Diplomacy")
        self.knowledge = Proficiency("Knowledge", "", "Strength", "Diplomacy")
        self.resist_frost = Proficiency("Resist frost", "", "Strength", "Resistance")
        self.resist_flame = Proficiency("Resist flame", "", "Strength", "Resistance")
        self.resist_shadow = Proficiency("Resist shadow", "", "Strength", "Resistance")
        self.resist_holy = Proficiency("Resist holy", "", "Strength", "Resistance")
        self.resist_blunt = Proficiency("Resist blunt", "", "Strength", "Resistance")
        self.resist_slashing = Proficiency("Resist slashing", "", "Strength", "Resistance")
        self.resist_piercing = Proficiency("Resist piercing", "", "Strength", "Resistance")
        

    def items(self):
        """Returns a list of 2-tuples

        Basically a dict.items() clone that looks like ([(key, value), (key, value), ...])
        """
        return ((key, getattr(self, key)) for key in ALL_PROFICIENCIES)
        
        
    def __iter__(self):
        return (getattr(self, key) for key in ALL_PROFICIENCIES)

        
class Proficiency(Base):
    """Proficiency class that stores data about a hero object.
    """
    __tablename__ = "proficiency"
    
    id = Column(Integer, primary_key=True)

    name = Column(String)
    description = Column(String)
    attribute_type = Column(String)
    type = Column(String)
    level = Column(Integer)
    value = Column(Integer)
    next_value = Column(Integer)
    is_not_max_level = Column(Boolean)

    def __init__(self, name, description, attribute_type, type):
        self.name = name
        self.description = description
        self.attribute_type = attribute_type
        self.type = type
        
        self.level = 1
        self.value = 10
        self.next_value = 15
        self.is_not_max_level = False

    # Needed because it's causing a bug
    def update(*args):
        pass

class AttackDamage(Proficiency):
    __tablename__ = "attack_damage"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"AttackDamage",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class AttackSpeed(Proficiency):
    __tablename__ = "attack_speed"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"AttackSpeed",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class AttackAccuracy(Proficiency):
    __tablename__ = "attack_accuracy"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"AttackAccuracy",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class FirstStrike(Proficiency):
    __tablename__ = "first_strike"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"FirstStrike",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class CriticalHit(Proficiency):
    __tablename__ = "critical_hit"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"CriticalHit",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Defence(Proficiency):
    __tablename__ = "defence"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Defence",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.endurance.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Evade(Proficiency):
    __tablename__ = "evade"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Evade",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Parry(Proficiency):
    __tablename__ = "parry"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Parry",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Riposte(Proficiency):
    __tablename__ = "riposte"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Riposte",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Block(Proficiency):
    __tablename__ = "block"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Block",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Stealth(Proficiency):
    __tablename__ = "stealth"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Stealth",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Pickpocketing(Proficiency):
    __tablename__ = "pickpocketing"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Pickpocketing",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Faith(Proficiency):
    __tablename__ = "faith"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Faith",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Bartering(Proficiency):
    __tablename__ = "bartering"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Bartering",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Oration(Proficiency):
    __tablename__ = "oration"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Oration",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class Knowledge(Proficiency):
    __tablename__ = "knowledge"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"Knowledge",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class ResistFrost(Proficiency):
    __tablename__ = "resist_frost"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"ResistFrost",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class ResistFlame(Proficiency):
    __tablename__ = "resist_flame"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"ResistFlame",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class ResistShadow(Proficiency):
    __tablename__ = "resist_shadow"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"ResistShadow",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class ResistHoly(Proficiency):
    __tablename__ = "resist_holy"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"ResistHoly",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class ResistBlunt(Proficiency):
    __tablename__ = "resist_blunt"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"ResistBlunt",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class ResistSlashing(Proficiency):
    __tablename__ = "resist_slashing"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"ResistSlashing",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5


class ResistPiercing(Proficiency):
    __tablename__ = "resist_piercing"
    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)
    
    __mapper_args__ = {
        'polymorphic_identity':"ResistPiercing",
    }
    
    def update(self, myHero):
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5

    
