"""This file is generated by "data/build_code.py"
It has been set to read only so that you don't edit it without using
build_code.py.
"""

from sqlalchemy import Column, Integer, String
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship

from base_classes import Base

PROFICIENCY_INFORMATION = [
    ("Attack damage", "", 'Unspecified'),
    ("Attack speed", "", 'Unspecified'),
    ("Attack accuracy", "", 'Unspecified'),
    ("First strike", "", 'Unspecified'),
    ("Critical hit", "", 'Unspecified'),
    ("Defence", "", 'Unspecified'),
    ("Evade", "", 'Unspecified'),
    ("Parry", "", 'Unspecified'),
    ("Riposte", "", 'Unspecified'),
    ("Block", "", 'Unspecified'),
    ("Stealth", "", 'Unspecified'),
    ("Pickpocketing", "", 'Unspecified'),
    ("Faith", "", 'Unspecified'),
    ("Bartering", "", 'Unspecified'),
    ("Oration", "", 'Unspecified'),
    ("Knowledge", "", 'Unspecified'),
    ("Resist frost", "", 'Unspecified'),
    ("Resist flame", "", 'Unspecified'),
    ("Resist shadow", "", 'Unspecified'),
    ("Resist holy", "", 'Unspecified'),
    ("Resist blunt", "", 'Unspecified'),
    ("Resist slashing", "", 'Unspecified'),
    ("Resist piercing", "", 'Unspecified')
]

ALL_PROFICIENCIES = [attrib[0].lower().replace(' ', '_') for attrib in PROFICIENCY_INFORMATION]

class Proficiencies(Base):
    __tablename__ = 'proficiencies'
    
    id = Column(Integer, primary_key=True)

    #Relationships
    attack_damage_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_damage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_damage_id]")
    attack_speed_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_speed = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_speed_id]")
    attack_accuracy_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_accuracy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_accuracy_id]")
    first_strike_id = Column(Integer, ForeignKey('proficiency.id'))
    first_strike = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.first_strike_id]")
    critical_hit_id = Column(Integer, ForeignKey('proficiency.id'))
    critical_hit = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.critical_hit_id]")
    defence_id = Column(Integer, ForeignKey('proficiency.id'))
    defence = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.defence_id]")
    evade_id = Column(Integer, ForeignKey('proficiency.id'))
    evade = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.evade_id]")
    parry_id = Column(Integer, ForeignKey('proficiency.id'))
    parry = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.parry_id]")
    riposte_id = Column(Integer, ForeignKey('proficiency.id'))
    riposte = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.riposte_id]")
    block_id = Column(Integer, ForeignKey('proficiency.id'))
    block = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.block_id]")
    stealth_id = Column(Integer, ForeignKey('proficiency.id'))
    stealth = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.stealth_id]")
    pickpocketing_id = Column(Integer, ForeignKey('proficiency.id'))
    pickpocketing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.pickpocketing_id]")
    faith_id = Column(Integer, ForeignKey('proficiency.id'))
    faith = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.faith_id]")
    bartering_id = Column(Integer, ForeignKey('proficiency.id'))
    bartering = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.bartering_id]")
    oration_id = Column(Integer, ForeignKey('proficiency.id'))
    oration = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.oration_id]")
    knowledge_id = Column(Integer, ForeignKey('proficiency.id'))
    knowledge = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.knowledge_id]")
    resist_frost_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_frost = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_frost_id]")
    resist_flame_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_flame = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_flame_id]")
    resist_shadow_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_shadow = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_shadow_id]")
    resist_holy_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_holy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_holy_id]")
    resist_blunt_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_blunt = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_blunt_id]")
    resist_slashing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_slashing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_slashing_id]")
    resist_piercing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_piercing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_piercing_id]")
    
    def __init__(self):
        
        self.attack_damage = Proficiency("Attack damage", "", "Unspecified")
        self.attack_speed = Proficiency("Attack speed", "", "Unspecified")
        self.attack_accuracy = Proficiency("Attack accuracy", "", "Unspecified")
        self.first_strike = Proficiency("First strike", "", "Unspecified")
        self.critical_hit = Proficiency("Critical hit", "", "Unspecified")
        self.defence = Proficiency("Defence", "", "Unspecified")
        self.evade = Proficiency("Evade", "", "Unspecified")
        self.parry = Proficiency("Parry", "", "Unspecified")
        self.riposte = Proficiency("Riposte", "", "Unspecified")
        self.block = Proficiency("Block", "", "Unspecified")
        self.stealth = Proficiency("Stealth", "", "Unspecified")
        self.pickpocketing = Proficiency("Pickpocketing", "", "Unspecified")
        self.faith = Proficiency("Faith", "", "Unspecified")
        self.bartering = Proficiency("Bartering", "", "Unspecified")
        self.oration = Proficiency("Oration", "", "Unspecified")
        self.knowledge = Proficiency("Knowledge", "", "Unspecified")
        self.resist_frost = Proficiency("Resist frost", "", "Unspecified")
        self.resist_flame = Proficiency("Resist flame", "", "Unspecified")
        self.resist_shadow = Proficiency("Resist shadow", "", "Unspecified")
        self.resist_holy = Proficiency("Resist holy", "", "Unspecified")
        self.resist_blunt = Proficiency("Resist blunt", "", "Unspecified")
        self.resist_slashing = Proficiency("Resist slashing", "", "Unspecified")
        self.resist_piercing = Proficiency("Resist piercing", "", "Unspecified")
        

    def items(self):
        """Returns a list of 2-tuples

        Basically a dict.items() clone that looks like ([(key, value), (key, value), ...])
        """
        return ((key, getattr(self, key)) for key in ALL_PROFICIENCIES)
        
        
    def __iter__(self):
        return (getattr(self, key) for key in ALL_PROFICIENCIES)

        
class Proficiency(Base):
    """Proficiency class that stores data about a hero object.
    """
    __tablename__ = "proficiency"
    
    id = Column(Integer, primary_key=True)

    name = Column(String)
    description = Column(String)
    attribute_type = Column(String)
    level = Column(Integer)
    value = Column(Integer)
    next_value = Column(Integer)
    max_level = Column(Integer)

    def __init__(self, name, description, attribute_type):
        self.name = name
        self.description = description
        self.attribute_type = attribute_type
        
        self.level = 1
        self.value = 10
        self.next_value = 15
        self.max_level = 1

    def update_testing(self, myHero):
        self.max_level = myHero.attributes.vitality // 2
        if self.max_level < 1:
            self.max_level = 1
        self.value = (self.level * 5) + 5
        self.next_value = ((self.level + 1) * 5) + 5
