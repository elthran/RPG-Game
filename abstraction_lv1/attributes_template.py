"""This file is generated by "data/build_code.py"
It has been set to read only so that you don't edit it without using
build_code.py.
"""

from sqlalchemy import Column, Integer, String
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship

from base_classes import Base

{% include "attributes_data.py" %}


class Attributes(Base):
    __tablename__ = 'attributes'
    
    id = Column(Integer, primary_key=True)

    # Relationships
    # Attribute class
    {% for name in ALL_ATTRIBUTES %}
    {{ name }}_id = Column(Integer, ForeignKey('attribute.id'))
    {{ name }} = relationship("Attribute", uselist=False, foreign_keys="[Attributes.{{ name }}_id]")
    {% endfor %}

    # Hero class
    # One Hero -> one Attributes object
    hero = relationship("Hero", back_populates='attributes', uselist=False)

    def __init__(self):
        {% for attrib in ATTRIBUTE_INFORMATION %}
        self.{{ attrib[0].lower() }} = Attribute("{{ attrib[0] }}", "{{ attrib[1] }}")
        {% endfor %}
        

    def items(self):
        """Returns a list of 2-tuples

        Basically a dict.items() clone that looks like ([(key, value), (key, value), ...])
        """
        return ((key, getattr(self, key)) for key in ALL_ATTRIBUTES)
        
        
    def __iter__(self):
        return (getattr(self, key) for key in ALL_ATTRIBUTES)

        
class Attribute(Base):
    """Attribute class that stores data about a hero object.
    """
    __tablename__ = "attribute"
    
    id = Column(Integer, primary_key=True)

    name = Column(String)
    description = Column(String)
    level = Column(Integer)
    
    def __init__(self, name, description):
        """Build the initial Attribute object.
        
        Set all values to 1.
        """
        
        self.name = name
        self.description = description
        self.level = 1

