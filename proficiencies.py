"""This file is generated by "data/build_code.py"
It has been set to read only so that you don't edit it without using
build_code.py.
"""

from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship, validates

from base_classes import Base

from math import sin, floor

# Name, Description, Attribute_Type, Type, [(Values Name, Value type, (Modifiers of value))]
# Linear: Level multiplier, Base Value
# Curvy: (larger "0" means it reaches the cap quicker) (smaller [1] means it reaxhes the cap quicker) ([2] is the cap or maximum possible value) ([3] is the negative amount)
# Sensitive: Like curvy but has decimals (larger [0] means it reaches the cap quicker) (smaller [1] means it reaches the cap quicker) ([2] is the cap or maximum possible value) ([3] is the negative amount)
# Modifier: (larger [0] means greater amplitude), (larger [1] means greater steepness andfaster increase), (greater [2]  means greater frequency of waves)
# Percent: ???
# Empty: Sets this value to take on the value of "maximum". Must be placed after "Maximum" in the list of variables
PROFICIENCY_INFORMATION = [
    ("Health", "How much you can take before you die", "Vitality", [("Maximum", "linear", (5, 0)), ("Current", "empty")]),
    ("Regeneration", "How quickly your wounds heal", "Vitality", [("Maximum", "linear", (5, 0)), ("Current", "empty")]),
    ("Recovery", "How quickly you recover from poisons and negative effects", "Vitality",[("Maximum", "linear", (5, 0)), ("Current", "empty")]),
    ("Climbing", "Your ability to climb obstacles", "Agility", [("Chance", "percent", (0.5, 20, 65, 0))]),
    ("Storage", "Your carrying capacity", "Brawn", [("Maximum", "linear", (2.5, 8)), ("Current", "empty")]),
    ("Encumbrance", "How much your are slowed down in combat by your equipment", "Brawn", [("Accuracy", "percent", (2, 10, 5, 5))]),
    ("Endurance", "Actions performed each day", "Resilience", [("Maximum", "linear", (0.25, 5)), ("Current", "empty")]),
    ("Damage", "How much damage you do on each hit", "Brawn", [("Minimum", "curvy", (0.5, 0.1, 0.1, 0)), ("Maximum",  "curvy", (0.5, 0.2, 0.1, 1))]),
    ("Speed", "How fast you attack", "Quickness", [("Speed", "sensitive", (0.1, 0.1, 0.7, 1))]),
    ("Accuracy", "The chance of your attacks hitting their target.", "Agility", [("Accuracy", "percent", (2, 10, 5, 5))]),
    ("First strike", "Chance to strike first", "Quickness", [("Chance", "percent", (0.5, 5, 50, -30))]),
    ("Killshot", "Ability to hit enemies in their weak spot", "Agility", [("Chance", "percent", (0.3, 5, 50, -22)), ("Modifier", "percent", (0.5, 1, 0.5, 0))]),
    ("Defence", "Damage reduction", "Resilience", [("Modifier", "percent", (0.1, 7, 35, 0))]),
    ("Evade", "Chance to dodge", "Quickness", [("Chance", "percent", (0.1, 10, 15, 0))]),
    ("Parry", "Chance to parry", "Quickness", [("Chance", "percent", (0.2, 15, 15, 0))]),
    ("Flee", "Chance to run from a battle", "Quickness", [("Chance", "percent", (0.2, 15, 15, 0))]),
    ("Riposte", "Chance to riposte an enrmy attack", "Agility", [("Chance", "percent", (0.3, 20, 15, 0))]),
    ("Fatigue", "How quickly you tire in combat", "Resilience", [("Maximum", "linear", (2, -1)), ("Current", "empty")]),
    ("Block", "Ability to block if a shield is equipped", "Resilience", [("Chance", "percent", (0.25, 25, 60, 0)), ("Modifier", "percent", (0.5, 25, 50, -5))]),
    ("Stealth", "Chance to avoid detection", "Agility", [("Chance", "percent", (0.5, 20, 65, 0))]),
    ("Pickpocketing", "Skill at stealing from others", "Agility", [("Chance", "percent", (0.6, 15, 70, 0))]),
    ("Faith", "Strength of spells you cast", "Divinity", [("Modifier", "percent", (2, 10, 5, 0))]),
    ("Sanctity", "Amount of sanctity you can have", "Divinity", [("Maximum", "linear", (5, 0)), ("Current", "empty")]),
    ("Resist holy", "Ability to resist holy damage", "Divinity", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Bartering", "Chance to negotiate prices", "Charisma", [("Chance", "percent", (0.5, 20, 60, 0))]),
    ("Oration", "Proficiency in speaking to others", "Charisma", [("Modifier", "percent", (0.75, 15, 60, 0))]),
    ("Charm", "How quickly other people will like you", "Charisma", [("Modifier", "percent", (0.75, 15, 60, 0))]),
    ("Trustworthiness", "How much other players trust you", "Charisma", [("Modifier", "percent", (0.75, 15, 60, 0))]),
    ("Renown", "How much your actions affect your reputation", "Charisma", [("Modifier", "percent", (0.75, 15, 60, 0))]),
    ("Knowledge", "Ability to understand", "Intellect", [("Modifier", "percent", (0.1, 5, 50, 0))]),
    ("Literacy", "Ability to read", "Intellect", [("Modifier", "percent", (0.25, 10, 75, 0))]),
    ("Understanding", "How quickly you level up", "Intellect", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Luckiness", "Chance to have things turn your way against all odds", "Fortuity", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Adventuring", "Chance to discover treasure", "Fortuity", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Logistics",  "How far you can move on the map", "Pathfinding", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Mountaineering", "Modifier for mountain movement", "Pathfinding", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Woodsman", "Modifier for forest movement", "Pathfinding", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Navigator", "Modifier for water movement", "Pathfinding", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Luck", "Chance to have things turn your way against all odds", "Survivalism", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Detection", "Chance to discover enemy stealth and traps", "Survivalism", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Caution",  "See information about a new grid before going there", "Survivalism", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Explorer", "Additional options on the map, such as foraging", "Survivalism", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Huntsman", "Learn additional information about enemies", "Survivalism", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Survivalist", "Create bandages, tents, and other useful objects", "Survivalism", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Resist frost", "Ability to resist frost damage", "Resilience", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist flame", "Ability to resist flame damage", "Resilience", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist shadow", "Ability to resist shadow damage", "Resilience", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist poison", "Ability to resist poison damage", "Resilience", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist blunt", "Ability to resist blunt damage", "Resilience", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist slashing", "Ability to resist slashing damage", "Resilience", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist piercing", "Ability to resist piercing damage", "Resilience", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Courage", "Your ability to overcome fears", "Willpower", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Sanity", "Your ability to resist mind altering affects", "Willpower", [("Modifier", "percent", (1, 50, 100, -15))])
    ]


ALL_PROFICIENCIES = [attrib[0].lower().replace(" ", "_") for attrib in PROFICIENCY_INFORMATION]

class Proficiencies(Base):
    __tablename__ = 'proficiencies'
    
    id = Column(Integer, primary_key=True)

    #Relationships
    health_id = Column(Integer, ForeignKey('proficiency.id'))
    health = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.health_id]")
    regeneration_id = Column(Integer, ForeignKey('proficiency.id'))
    regeneration = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.regeneration_id]")
    recovery_id = Column(Integer, ForeignKey('proficiency.id'))
    recovery = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.recovery_id]")
    climbing_id = Column(Integer, ForeignKey('proficiency.id'))
    climbing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.climbing_id]")
    storage_id = Column(Integer, ForeignKey('proficiency.id'))
    storage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.storage_id]")
    encumbrance_id = Column(Integer, ForeignKey('proficiency.id'))
    encumbrance = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.encumbrance_id]")
    endurance_id = Column(Integer, ForeignKey('proficiency.id'))
    endurance = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.endurance_id]")
    damage_id = Column(Integer, ForeignKey('proficiency.id'))
    damage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.damage_id]")
    speed_id = Column(Integer, ForeignKey('proficiency.id'))
    speed = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.speed_id]")
    accuracy_id = Column(Integer, ForeignKey('proficiency.id'))
    accuracy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.accuracy_id]")
    first_strike_id = Column(Integer, ForeignKey('proficiency.id'))
    first_strike = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.first_strike_id]")
    killshot_id = Column(Integer, ForeignKey('proficiency.id'))
    killshot = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.killshot_id]")
    defence_id = Column(Integer, ForeignKey('proficiency.id'))
    defence = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.defence_id]")
    evade_id = Column(Integer, ForeignKey('proficiency.id'))
    evade = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.evade_id]")
    parry_id = Column(Integer, ForeignKey('proficiency.id'))
    parry = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.parry_id]")
    flee_id = Column(Integer, ForeignKey('proficiency.id'))
    flee = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.flee_id]")
    riposte_id = Column(Integer, ForeignKey('proficiency.id'))
    riposte = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.riposte_id]")
    fatigue_id = Column(Integer, ForeignKey('proficiency.id'))
    fatigue = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.fatigue_id]")
    block_id = Column(Integer, ForeignKey('proficiency.id'))
    block = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.block_id]")
    stealth_id = Column(Integer, ForeignKey('proficiency.id'))
    stealth = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.stealth_id]")
    pickpocketing_id = Column(Integer, ForeignKey('proficiency.id'))
    pickpocketing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.pickpocketing_id]")
    faith_id = Column(Integer, ForeignKey('proficiency.id'))
    faith = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.faith_id]")
    sanctity_id = Column(Integer, ForeignKey('proficiency.id'))
    sanctity = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.sanctity_id]")
    resist_holy_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_holy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_holy_id]")
    bartering_id = Column(Integer, ForeignKey('proficiency.id'))
    bartering = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.bartering_id]")
    oration_id = Column(Integer, ForeignKey('proficiency.id'))
    oration = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.oration_id]")
    charm_id = Column(Integer, ForeignKey('proficiency.id'))
    charm = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.charm_id]")
    trustworthiness_id = Column(Integer, ForeignKey('proficiency.id'))
    trustworthiness = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.trustworthiness_id]")
    renown_id = Column(Integer, ForeignKey('proficiency.id'))
    renown = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.renown_id]")
    knowledge_id = Column(Integer, ForeignKey('proficiency.id'))
    knowledge = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.knowledge_id]")
    literacy_id = Column(Integer, ForeignKey('proficiency.id'))
    literacy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.literacy_id]")
    understanding_id = Column(Integer, ForeignKey('proficiency.id'))
    understanding = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.understanding_id]")
    luckiness_id = Column(Integer, ForeignKey('proficiency.id'))
    luckiness = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.luckiness_id]")
    adventuring_id = Column(Integer, ForeignKey('proficiency.id'))
    adventuring = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.adventuring_id]")
    logistics_id = Column(Integer, ForeignKey('proficiency.id'))
    logistics = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.logistics_id]")
    mountaineering_id = Column(Integer, ForeignKey('proficiency.id'))
    mountaineering = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.mountaineering_id]")
    woodsman_id = Column(Integer, ForeignKey('proficiency.id'))
    woodsman = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.woodsman_id]")
    navigator_id = Column(Integer, ForeignKey('proficiency.id'))
    navigator = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.navigator_id]")
    luck_id = Column(Integer, ForeignKey('proficiency.id'))
    luck = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.luck_id]")
    detection_id = Column(Integer, ForeignKey('proficiency.id'))
    detection = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.detection_id]")
    caution_id = Column(Integer, ForeignKey('proficiency.id'))
    caution = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.caution_id]")
    explorer_id = Column(Integer, ForeignKey('proficiency.id'))
    explorer = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.explorer_id]")
    huntsman_id = Column(Integer, ForeignKey('proficiency.id'))
    huntsman = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.huntsman_id]")
    survivalist_id = Column(Integer, ForeignKey('proficiency.id'))
    survivalist = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.survivalist_id]")
    resist_frost_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_frost = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_frost_id]")
    resist_flame_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_flame = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_flame_id]")
    resist_shadow_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_shadow = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_shadow_id]")
    resist_poison_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_poison = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_poison_id]")
    resist_blunt_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_blunt = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_blunt_id]")
    resist_slashing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_slashing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_slashing_id]")
    resist_piercing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_piercing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_piercing_id]")
    courage_id = Column(Integer, ForeignKey('proficiency.id'))
    courage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.courage_id]")
    sanity_id = Column(Integer, ForeignKey('proficiency.id'))
    sanity = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.sanity_id]")
    
    def __init__(self):
        
        self.health = Health("Health", "How much you can take before you die", "Vitality")
        self.regeneration = Regeneration("Regeneration", "How quickly your wounds heal", "Vitality")
        self.recovery = Recovery("Recovery", "How quickly you recover from poisons and negative effects", "Vitality")
        self.climbing = Climbing("Climbing", "Your ability to climb obstacles", "Agility")
        self.storage = Storage("Storage", "Your carrying capacity", "Brawn")
        self.encumbrance = Encumbrance("Encumbrance", "How much your are slowed down in combat by your equipment", "Brawn")
        self.endurance = Endurance("Endurance", "Actions performed each day", "Resilience")
        self.damage = Damage("Damage", "How much damage you do on each hit", "Brawn")
        self.speed = Speed("Speed", "How fast you attack", "Quickness")
        self.accuracy = Accuracy("Accuracy", "The chance of your attacks hitting their target.", "Agility")
        self.first_strike = FirstStrike("First strike", "Chance to strike first", "Quickness")
        self.killshot = Killshot("Killshot", "Ability to hit enemies in their weak spot", "Agility")
        self.defence = Defence("Defence", "Damage reduction", "Resilience")
        self.evade = Evade("Evade", "Chance to dodge", "Quickness")
        self.parry = Parry("Parry", "Chance to parry", "Quickness")
        self.flee = Flee("Flee", "Chance to run from a battle", "Quickness")
        self.riposte = Riposte("Riposte", "Chance to riposte an enrmy attack", "Agility")
        self.fatigue = Fatigue("Fatigue", "How quickly you tire in combat", "Resilience")
        self.block = Block("Block", "Ability to block if a shield is equipped", "Resilience")
        self.stealth = Stealth("Stealth", "Chance to avoid detection", "Agility")
        self.pickpocketing = Pickpocketing("Pickpocketing", "Skill at stealing from others", "Agility")
        self.faith = Faith("Faith", "Strength of spells you cast", "Divinity")
        self.sanctity = Sanctity("Sanctity", "Amount of sanctity you can have", "Divinity")
        self.resist_holy = ResistHoly("Resist holy", "Ability to resist holy damage", "Divinity")
        self.bartering = Bartering("Bartering", "Chance to negotiate prices", "Charisma")
        self.oration = Oration("Oration", "Proficiency in speaking to others", "Charisma")
        self.charm = Charm("Charm", "How quickly other people will like you", "Charisma")
        self.trustworthiness = Trustworthiness("Trustworthiness", "How much other players trust you", "Charisma")
        self.renown = Renown("Renown", "How much your actions affect your reputation", "Charisma")
        self.knowledge = Knowledge("Knowledge", "Ability to understand", "Intellect")
        self.literacy = Literacy("Literacy", "Ability to read", "Intellect")
        self.understanding = Understanding("Understanding", "How quickly you level up", "Intellect")
        self.luckiness = Luckiness("Luckiness", "Chance to have things turn your way against all odds", "Fortuity")
        self.adventuring = Adventuring("Adventuring", "Chance to discover treasure", "Fortuity")
        self.logistics = Logistics("Logistics", "How far you can move on the map", "Pathfinding")
        self.mountaineering = Mountaineering("Mountaineering", "Modifier for mountain movement", "Pathfinding")
        self.woodsman = Woodsman("Woodsman", "Modifier for forest movement", "Pathfinding")
        self.navigator = Navigator("Navigator", "Modifier for water movement", "Pathfinding")
        self.luck = Luck("Luck", "Chance to have things turn your way against all odds", "Survivalism")
        self.detection = Detection("Detection", "Chance to discover enemy stealth and traps", "Survivalism")
        self.caution = Caution("Caution", "See information about a new grid before going there", "Survivalism")
        self.explorer = Explorer("Explorer", "Additional options on the map, such as foraging", "Survivalism")
        self.huntsman = Huntsman("Huntsman", "Learn additional information about enemies", "Survivalism")
        self.survivalist = Survivalist("Survivalist", "Create bandages, tents, and other useful objects", "Survivalism")
        self.resist_frost = ResistFrost("Resist frost", "Ability to resist frost damage", "Resilience")
        self.resist_flame = ResistFlame("Resist flame", "Ability to resist flame damage", "Resilience")
        self.resist_shadow = ResistShadow("Resist shadow", "Ability to resist shadow damage", "Resilience")
        self.resist_poison = ResistPoison("Resist poison", "Ability to resist poison damage", "Resilience")
        self.resist_blunt = ResistBlunt("Resist blunt", "Ability to resist blunt damage", "Resilience")
        self.resist_slashing = ResistSlashing("Resist slashing", "Ability to resist slashing damage", "Resilience")
        self.resist_piercing = ResistPiercing("Resist piercing", "Ability to resist piercing damage", "Resilience")
        self.courage = Courage("Courage", "Your ability to overcome fears", "Willpower")
        self.sanity = Sanity("Sanity", "Your ability to resist mind altering affects", "Willpower")
        

    def items(self):
        """Returns a list of 2-tuples

        Basically a dict.items() clone that looks like ([(key, value), (key, value), ...])
        """
        return ((key, getattr(self, key)) for key in ALL_PROFICIENCIES)
        
        
    def __iter__(self):
        return (getattr(self, key) for key in ALL_PROFICIENCIES)

        
class Proficiency(Base):
    """Proficiency class that stores data about a hero object.
    """
    __tablename__ = "proficiency"
    
    id = Column(Integer, primary_key=True)

    name = Column(String)
    description = Column(String)
    tooltip = Column(String)
    attribute_type = Column(String)
    level = Column(Integer)
    next_value = Column(Integer)
    is_not_max_level = Column(Boolean)
    
    _class = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Proficiency",
        'polymorphic_on':_class
    }

    def __init__(self, name, description, attribute_type):
        self.name = name
        self.description = description
        self.attribute_type = attribute_type
        self.tooltip = ""
        
        self.level = 1
        self.is_not_max_level = False
        
    def is_max_level(self, hero):
        """Return whether proficiency is max level.
        
        Should be able to get hero internally but the 
        relationships may be messed up.
        
        Replaces:
            is_not_max_level attribute.
        """
        return self.level >= getattr(hero.attributes, self.attribute_type.lower()).level // 2
        
    def level_up(self):
        self.level += 1


class Health(Proficiency):
    __tablename__ = "health"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Health",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough vitality"
        self.formatted_name = "health" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Health's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.vitality.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(5*self.level + 0)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_health(self, key_name, current):
        #Update health percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Regeneration(Proficiency):
    __tablename__ = "regeneration"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Regeneration",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough vitality"
        self.formatted_name = "regeneration" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Regeneration's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.vitality.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(5*self.level + 0)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_regeneration(self, key_name, current):
        #Update regeneration percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Recovery(Proficiency):
    __tablename__ = "recovery"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Recovery",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough vitality"
        self.formatted_name = "recovery" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Recovery's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.vitality.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(5*self.level + 0)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_recovery(self, key_name, current):
        #Update recovery percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Climbing(Proficiency):
    __tablename__ = "climbing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Climbing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "climbing" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Climbing's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (20*65)/((0.5 * self.level) + 20) + 65) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Storage(Proficiency):
    __tablename__ = "storage"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Storage",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough brawn"
        self.formatted_name = "storage" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Storage's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.brawn.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(2.5*self.level + 8)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_storage(self, key_name, current):
        #Update storage percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Encumbrance(Proficiency):
    __tablename__ = "encumbrance"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    accuracy = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Encumbrance",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.accuracy = 0
        
        self.error = "You do not have enough brawn"
        self.formatted_name = "encumbrance" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Encumbrance's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.brawn.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.accuracy = floor((- (10*5)/((2 * self.level) + 10) + 5) * 7.9 + 5)
        # This creates a tooltip for each variable
        tooltips.append("Accuracy: " + str(self.accuracy)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Endurance(Proficiency):
    __tablename__ = "endurance"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Endurance",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "endurance" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Endurance's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(0.25*self.level + 5)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_endurance(self, key_name, current):
        #Update endurance percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Damage(Proficiency):
    __tablename__ = "damage"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    minimum = Column(Integer)
    maximum = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Damage",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.minimum = 0
        self.maximum = 0
        
        self.error = "You do not have enough brawn"
        self.formatted_name = "damage" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Damage's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.brawn.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.minimum = floor(floor(3 * (0.5*sin(0.1*self.level) + 0.1*self.level)) + 0)
        # This creates a tooltip for each variable
        tooltips.append("Minimum: " + str(self.minimum)) 
        self.maximum = floor(floor(3 * (0.5*sin(0.1*self.level) + 0.2*self.level)) + 1)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Speed(Proficiency):
    __tablename__ = "speed"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    speed = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Speed",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.speed = 0
        
        self.error = "You do not have enough quickness"
        self.formatted_name = "speed" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Speed's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.quickness.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.speed = round((3 * (0.1*sin(0.7*self.level) + 0.1*self.level)) + 1, 2)
        # This creates a tooltip for each variable
        tooltips.append("Speed: " + str(self.speed)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Accuracy(Proficiency):
    __tablename__ = "accuracy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    accuracy = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Accuracy",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.accuracy = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "accuracy" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Accuracy's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.accuracy = floor((- (10*5)/((2 * self.level) + 10) + 5) * 7.9 + 5)
        # This creates a tooltip for each variable
        tooltips.append("Accuracy: " + str(self.accuracy)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class FirstStrike(Proficiency):
    __tablename__ = "first_strike"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"FirstStrike",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough quickness"
        self.formatted_name = "first_strike" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update FirstStrike's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.quickness.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*50)/((0.5 * self.level) + 5) + 50) * 7.9 + -30)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Killshot(Proficiency):
    __tablename__ = "killshot"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Killshot",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.modifier = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "killshot" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Killshot's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*50)/((0.3 * self.level) + 5) + 50) * 7.9 + -22)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        self.modifier = floor((- (1*0.5)/((0.5 * self.level) + 1) + 0.5) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Defence(Proficiency):
    __tablename__ = "defence"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Defence",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "defence" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Defence's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (7*35)/((0.1 * self.level) + 7) + 35) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Evade(Proficiency):
    __tablename__ = "evade"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Evade",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough quickness"
        self.formatted_name = "evade" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Evade's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.quickness.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (10*15)/((0.1 * self.level) + 10) + 15) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Parry(Proficiency):
    __tablename__ = "parry"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Parry",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough quickness"
        self.formatted_name = "parry" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Parry's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.quickness.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (15*15)/((0.2 * self.level) + 15) + 15) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Flee(Proficiency):
    __tablename__ = "flee"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Flee",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough quickness"
        self.formatted_name = "flee" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Flee's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.quickness.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (15*15)/((0.2 * self.level) + 15) + 15) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Riposte(Proficiency):
    __tablename__ = "riposte"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Riposte",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "riposte" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Riposte's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (20*15)/((0.3 * self.level) + 20) + 15) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Fatigue(Proficiency):
    __tablename__ = "fatigue"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Fatigue",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "fatigue" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Fatigue's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(2*self.level + -1)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_fatigue(self, key_name, current):
        #Update fatigue percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Block(Proficiency):
    __tablename__ = "block"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Block",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "block" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Block's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (25*60)/((0.25 * self.level) + 25) + 60) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        self.modifier = floor((- (25*50)/((0.5 * self.level) + 25) + 50) * 7.9 + -5)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Stealth(Proficiency):
    __tablename__ = "stealth"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Stealth",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "stealth" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Stealth's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (20*65)/((0.5 * self.level) + 20) + 65) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Pickpocketing(Proficiency):
    __tablename__ = "pickpocketing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Pickpocketing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "pickpocketing" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Pickpocketing's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (15*70)/((0.6 * self.level) + 15) + 70) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Faith(Proficiency):
    __tablename__ = "faith"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Faith",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough divinity"
        self.formatted_name = "faith" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Faith's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.divinity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (10*5)/((2 * self.level) + 10) + 5) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Sanctity(Proficiency):
    __tablename__ = "sanctity"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Sanctity",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough divinity"
        self.formatted_name = "sanctity" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Sanctity's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.divinity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(5*self.level + 0)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_sanctity(self, key_name, current):
        #Update sanctity percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class ResistHoly(Proficiency):
    __tablename__ = "resist_holy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistHoly",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough divinity"
        self.formatted_name = "resist_holy" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistHoly's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.divinity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Bartering(Proficiency):
    __tablename__ = "bartering"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Bartering",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough charisma"
        self.formatted_name = "bartering" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Bartering's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.charisma.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (20*60)/((0.5 * self.level) + 20) + 60) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Oration(Proficiency):
    __tablename__ = "oration"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Oration",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough charisma"
        self.formatted_name = "oration" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Oration's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.charisma.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (15*60)/((0.75 * self.level) + 15) + 60) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Charm(Proficiency):
    __tablename__ = "charm"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Charm",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough charisma"
        self.formatted_name = "charm" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Charm's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.charisma.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (15*60)/((0.75 * self.level) + 15) + 60) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Trustworthiness(Proficiency):
    __tablename__ = "trustworthiness"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Trustworthiness",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough charisma"
        self.formatted_name = "trustworthiness" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Trustworthiness's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.charisma.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (15*60)/((0.75 * self.level) + 15) + 60) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Renown(Proficiency):
    __tablename__ = "renown"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Renown",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough charisma"
        self.formatted_name = "renown" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Renown's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.charisma.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (15*60)/((0.75 * self.level) + 15) + 60) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Knowledge(Proficiency):
    __tablename__ = "knowledge"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Knowledge",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough intellect"
        self.formatted_name = "knowledge" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Knowledge's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.intellect.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (5*50)/((0.1 * self.level) + 5) + 50) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Literacy(Proficiency):
    __tablename__ = "literacy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Literacy",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough intellect"
        self.formatted_name = "literacy" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Literacy's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.intellect.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (10*75)/((0.25 * self.level) + 10) + 75) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Understanding(Proficiency):
    __tablename__ = "understanding"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Understanding",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough intellect"
        self.formatted_name = "understanding" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Understanding's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.intellect.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Luckiness(Proficiency):
    __tablename__ = "luckiness"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Luckiness",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough fortuity"
        self.formatted_name = "luckiness" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Luckiness's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.fortuity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Adventuring(Proficiency):
    __tablename__ = "adventuring"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Adventuring",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough fortuity"
        self.formatted_name = "adventuring" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Adventuring's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.fortuity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Logistics(Proficiency):
    __tablename__ = "logistics"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Logistics",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough pathfinding"
        self.formatted_name = "logistics" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Logistics's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.pathfinding.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Mountaineering(Proficiency):
    __tablename__ = "mountaineering"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Mountaineering",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough pathfinding"
        self.formatted_name = "mountaineering" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Mountaineering's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.pathfinding.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Woodsman(Proficiency):
    __tablename__ = "woodsman"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Woodsman",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough pathfinding"
        self.formatted_name = "woodsman" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Woodsman's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.pathfinding.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Navigator(Proficiency):
    __tablename__ = "navigator"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Navigator",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough pathfinding"
        self.formatted_name = "navigator" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Navigator's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.pathfinding.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Luck(Proficiency):
    __tablename__ = "luck"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Luck",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough survivalism"
        self.formatted_name = "luck" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Luck's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.survivalism.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Detection(Proficiency):
    __tablename__ = "detection"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Detection",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough survivalism"
        self.formatted_name = "detection" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Detection's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.survivalism.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Caution(Proficiency):
    __tablename__ = "caution"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Caution",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough survivalism"
        self.formatted_name = "caution" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Caution's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.survivalism.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Explorer(Proficiency):
    __tablename__ = "explorer"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Explorer",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough survivalism"
        self.formatted_name = "explorer" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Explorer's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.survivalism.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Huntsman(Proficiency):
    __tablename__ = "huntsman"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Huntsman",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough survivalism"
        self.formatted_name = "huntsman" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Huntsman's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.survivalism.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Survivalist(Proficiency):
    __tablename__ = "survivalist"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Survivalist",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough survivalism"
        self.formatted_name = "survivalist" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Survivalist's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.survivalism.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistFrost(Proficiency):
    __tablename__ = "resist_frost"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistFrost",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_frost" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistFrost's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistFlame(Proficiency):
    __tablename__ = "resist_flame"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistFlame",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_flame" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistFlame's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistShadow(Proficiency):
    __tablename__ = "resist_shadow"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistShadow",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_shadow" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistShadow's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistPoison(Proficiency):
    __tablename__ = "resist_poison"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistPoison",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_poison" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistPoison's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistBlunt(Proficiency):
    __tablename__ = "resist_blunt"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistBlunt",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_blunt" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistBlunt's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistSlashing(Proficiency):
    __tablename__ = "resist_slashing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistSlashing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_slashing" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistSlashing's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistPiercing(Proficiency):
    __tablename__ = "resist_piercing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistPiercing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_piercing" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistPiercing's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Courage(Proficiency):
    __tablename__ = "courage"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Courage",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough willpower"
        self.formatted_name = "courage" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Courage's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.willpower.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Sanity(Proficiency):
    __tablename__ = "sanity"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Sanity",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough willpower"
        self.formatted_name = "sanity" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Sanity's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.willpower.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    




    """

    @validates('endurance')
    def sync_endurance_percent(self, key_name, endurance_value):
        #Update endurance_percent on endurance change.

        try:
            self.endurance_percent = round(endurance_value / self.proficiencies.endurance.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.endurance_percent = 0

        return max(endurance_value, 0)

    @validates('sanctity')
    def sync_sanctity_percent(self, key_name, sanctity_value):
        #Update sanctity_percent on sanctity change.

        try:
            self.sanctity_percent = round(sanctity_value / self.proficiencies.sanctity.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.sanctity_percent = 0

        return max(sanctity_value, 0)

    @validates('experience')
    def sync_experience_percent(self, key_name, xp_value):
        #Update exp_percent on current_exp change.

        #String conversion occurs in HTML and add the percent sign is added there to.
        #key_name is "current_exp" .. not actually used here at this time but it is sent to
        #this function so it must be accepted.

        try:
            self.experience_percent = round(xp_value / self.experience_maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.experience_percent = 0
        return xp_value

    @validates('health')
    def sync_health_percent(self, key_name, health_value):
        #Update health_percent on health change.

        try:
            self.health_percent = round(health_value / self.proficiencies.health.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.health_percent = 0

        return max(health_value or 0, 0)
    """

    
    def __iter__(self):
        pass # I don't know what to put here yet but it will be used later on.