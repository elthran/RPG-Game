"""
This file is generated by 'build_code.py'.
It has been set to read only so that you don't edit it without using
'build_code.py'. Thought that may change in the future.
"""

from sqlalchemy import Column, Integer, String, Boolean, Float
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declared_attr

from base_classes import Base

from math import sin, floor

# For testing
from pprint import pprint
import pdb

"""
Name, Description, Attribute_Type, Type, [(Values Name, Value type,
    (Modifiers of value), Decimal Places)]
Linear: (Level multiplier), (Starting Value)
Root: Not finished. Looks like square root function. Used for diminishing
    returns and things that get better the larger they are. (Starting value)
    [Currently approaches 100]

Curvy: (larger "0" means it reaches the cap quicker) (smaller [1] means it
    reaxhes the cap quicker) ([2] is the cap or maximum possible value)
    ([3] is the negative amount)
Sensitive: Like curvy but has decimals (larger [0] means it reaches the cap
    quicker) (smaller [1] means it reaches the cap quicker) ([2] is the cap
    or maximum possible value) ([3] is the negative amount)
Modifier: (larger [0] means greater amplitude), (larger [1] means greater
    steepness and faster increase), (greater [2]  means greater frequency of
    waves)
Percent: ???
Empty: Sets this value to take on the value of "maximum". Must be placed after
    "Maximum" in the list of variables
"""

from build_code import normalize_attrib_name

PROFICIENCY_INFORMATION = [
    ("Health", "How much you can take before you die", "Vitality",
        [("Maximum", "linear", (2, 5, 0)),
         ("Current", "percent")]),
    ("Regeneration", "How quickly your wounds heal", "Vitality",
        [("Speed", "root", (1, 2))]),
    ("Recovery", "How quickly you recover from poisons and negative effects",
        "Vitality",
        [("Efficiency", "root", (0, 0))]),
    ("Climbing", "Your ability to climb obstacles", "Agility",
        [("Ability", "linear", (0.5, 0.5, 1))]),
    ("Storage", "Your carrying capacity", "Brawn",
        [("Maximum", "linear", (2, 10, 0)),
         ("Current", "percent")]),
    ("Encumbrance", "How much your are slowed down in combat by your "
                    "equipment", "Brawn",
        [("Amount", "root", (0, 0))]),
    ("Endurance", "Actions performed each day", "Resilience",
        [("Maximum", "linear", (1, 3, 0)),
         ("Current", "percent")]),
    ("Damage", "How much damage you do on each hit", "Brawn",
        [("Minimum", "linear", (1, 0, 0)),
         ("Maximum", "linear", (1, 1, 0)),
         ("Modifier", "linear", (.1, 1, 1))]),
    ("Speed", "How fast you attack", "Quickness",
        [("Speed", "linear", (0.03, 1, 2))]),
    ("Accuracy", "The chance of your attacks hitting their target.",
        "Agility",
        [("Accuracy", "root", (35, 0))]),
    ("First strike", "Chance to strike first", "Quickness",
        [("Chance", "root", (0, 0))]),
    ("Killshot", "Ability to hit enemies in their weak spot", "Agility",
        [("Chance", "root", (0, 0)),
         ("Modifier", "linear", (0.1, 1, 1))]),
    ("Defence", "Damage reduction", "Resilience",
        [("Modifier", "root", (0, 0))]),
    ("Evade", "Chance to dodge", "Quickness",
        [("Chance", "root", (5, 0))]),
    ("Parry", "Chance to parry", "Quickness",
        [("Chance", "root", (2, 0))]),
    ("Flee", "Chance to run from a battle", "Quickness",
        [("Chance", "root", (7, 0))]),
    ("Riposte", "Chance to riposte an enemy attack", "Agility",
        [("Chance", "root", (0, 0))]),
    ("Fatigue", "How quickly you tire in combat", "Resilience",
        [("Maximum", "linear", (1, 5, 0)),
         ("Current", "percent")]),
    ("Block", "Ability to block if a shield is equipped", "Resilience",
        [("Chance", "root", (0, 0)),
         ("Modifier", "root", (0, 0))]),
    ("Stealth", "Chance to avoid detection", "Agility",
        [("Chance", "root", (3, 0))]),
    ("Pickpocketing", "Skill at stealing from others", "Agility",
        [("Chance", "root", (1, 0))]),
    ("Faith", "Strength of spells you cast", "Divinity",
        [("Modifier", "linear", (0.1, 1, 0))]),
    ("Sanctity", "Amount of sanctity you can have", "Divinity",
        [("Maximum", "linear", (3, 0, 0)),
         ("Current", "percent")]),
    ("Resist holy", "Ability to resist holy damage", "Divinity",
        [("Modifier", "root", (0, 0))]),
    ("Bartering", "Discount from negotiating prices", "Charisma",
        [("Modifier", "linear", (-0.05, 1, 0))]),
    ("Oration", "Proficiency in speaking to others", "Charisma",
        [("Modifier", "root", (11, 0))]),
    ("Charm", "How quickly other people will like you", "Charisma",
        [("Modifier", "root", (3, 0))]),
    ("Trustworthiness", "How much other players trust you", "Charisma",
        [("Modifier", "root", (0, 0))]),
    ("Renown", "How much your actions affect your reputation", "Charisma",
        [("Modifier", "linear", (0.1, 1, 0))]),
    ("Knowledge", "Ability to understand", "Intellect",
        [("Modifier", "root", (6, 0))]),
    ("Literacy", "Ability to read", "Intellect",
        [("Modifier", "root", (0, 0))]),
    ("Understanding", "How quickly you level up", "Intellect",
        [("Modifier", "linear", (0.05, 1, 0))]),
    ("Luckiness", "Chance to have things turn your way against all odds",
        "Fortuity",
        [("Chance", "linear", (0.01, 0, 0))]),
    ("Adventuring", "Chance to discover treasure", "Fortuity",
        [("Chance", "root", (0, 0))]),
    ("Logistics",  "How far you can move on the map", "Pathfinding",
        [("Modifier", "linear", (0.2, 1, 0))]),
    ("Mountaineering", "Modifier for mountain movement", "Pathfinding",
        [("Modifier", "linear", (0.5, 1, 0))]),
    ("Woodsman", "Modifier for forest movement", "Pathfinding",
        [("Modifier", "linear", (.5, 1, 0))]),
    ("Navigator", "Modifier for water movement", "Pathfinding",
        [("Modifier", "linear", (.5, 1, 0))]),
    ("Detection", "Chance to discover enemy stealth and traps", "Survivalism",
        [("Chance", "root", (0, 0))]),
    ("Caution",  "See information about a new grid before going there",
        "Survivalism",
        [("Ability", "linear", (0.5, 0.5, 0))]),
    ("Explorer", "Additional options on the map, such as foraging",
        "Survivalism",
        [("Ability", "linear", (0.5, 0.5, 0))]),
    ("Huntsman", "Learn additional information about enemies",
        "Survivalism",
        [("Ability", "linear", (0.5, 0.5, 0))]),
    ("Survivalist", "Create bandages, tents, and other useful objects",
        "Survivalism",
        [("Ability", "linear", (0.5, 0.5, 0))]),
    ("Resist frost", "Ability to resist frost damage", "Resilience",
        [("Modifier", "root", (0, 0))]),
    ("Resist flame", "Ability to resist flame damage", "Resilience",
        [("Modifier", "root", (0, 0))]),
    ("Resist shadow", "Ability to resist shadow damage", "Resilience",
        [("Modifier", "root", (0, 0))]),
    ("Resist poison", "Ability to resist poison damage", "Resilience",
        [("Modifier", "root", (0, 0))]),
    ("Resist blunt", "Ability to resist blunt damage", "Resilience",
        [("Modifier", "root", (0, 0))]),
    ("Resist slashing", "Ability to resist slashing damage", "Resilience",
        [("Modifier", "root", (0, 0))]),
    ("Resist piercing", "Ability to resist piercing damage", "Resilience",
        [("Modifier", "root", (0, 0))]),
    ("Courage", "Your ability to overcome fears", "Willpower",
        [("Skill", "linear", (1, 0, 0))]),
    ("Sanity", "Your ability to resist mind altering affects", "Willpower",
        [("Skill", "linear", (1, 0, 0))]),
]
ALL_NAMES = ['Accuracy', 'Adventuring', 'Bartering', 'Block', 'Caution', 'Charm', 'Climbing', 'Courage', 'Damage', 'Defence', 'Detection', 'Encumbrance', 'Endurance', 'Evade', 'Explorer', 'Faith', 'Fatigue', 'First strike', 'Flee', 'Health', 'Huntsman', 'Killshot', 'Knowledge', 'Literacy', 'Logistics', 'Luckiness', 'Mountaineering', 'Navigator', 'Oration', 'Parry', 'Pickpocketing', 'Recovery', 'Regeneration', 'Renown', 'Resist blunt', 'Resist flame', 'Resist frost', 'Resist holy', 'Resist piercing', 'Resist poison', 'Resist shadow', 'Resist slashing', 'Riposte', 'Sanctity', 'Sanity', 'Speed', 'Stealth', 'Storage', 'Survivalist', 'Trustworthiness', 'Understanding', 'Woodsman']
ALL_ATTRIBUTE_NAMES = ['accuracy', 'adventuring', 'bartering', 'block', 'caution', 'charm', 'climbing', 'courage', 'damage', 'defence', 'detection', 'encumbrance', 'endurance', 'evade', 'explorer', 'faith', 'fatigue', 'first_strike', 'flee', 'health', 'huntsman', 'killshot', 'knowledge', 'literacy', 'logistics', 'luckiness', 'mountaineering', 'navigator', 'oration', 'parry', 'pickpocketing', 'recovery', 'regeneration', 'renown', 'resist_blunt', 'resist_flame', 'resist_frost', 'resist_holy', 'resist_piercing', 'resist_poison', 'resist_shadow', 'resist_slashing', 'riposte', 'sanctity', 'sanity', 'speed', 'stealth', 'storage', 'survivalist', 'trustworthiness', 'understanding', 'woodsman']
ALL_CLASS_NAMES = ['Accuracy', 'Adventuring', 'Bartering', 'Block', 'Caution', 'Charm', 'Climbing', 'Courage', 'Damage', 'Defence', 'Detection', 'Encumbrance', 'Endurance', 'Evade', 'Explorer', 'Faith', 'Fatigue', 'FirstStrike', 'Flee', 'Health', 'Huntsman', 'Killshot', 'Knowledge', 'Literacy', 'Logistics', 'Luckiness', 'Mountaineering', 'Navigator', 'Oration', 'Parry', 'Pickpocketing', 'Recovery', 'Regeneration', 'Renown', 'ResistBlunt', 'ResistFlame', 'ResistFrost', 'ResistHoly', 'ResistPiercing', 'ResistPoison', 'ResistShadow', 'ResistSlashing', 'Riposte', 'Sanctity', 'Sanity', 'Speed', 'Stealth', 'Storage', 'Survivalist', 'Trustworthiness', 'Understanding', 'Woodsman']


class Proficiency(Base):
    """Proficiency class that stores data about a hero object.
    """
    __tablename__ = "proficiency"
    
    id = Column(Integer, primary_key=True)

    # Relationships
    # Hero to Proficiencies is One to many?
    hero_id = Column(Integer, ForeignKey('hero.id', ondelete="CASCADE"))
    hero = relationship("Hero", back_populates="base_proficiencies")

    # Ability to Proficiency is One to many?
    ability_id = Column(Integer, ForeignKey('ability.id', ondelete="CASCADE"))
    ability = relationship("Ability", back_populates="proficiencies")

    type_ = Column(String(50))
    description = Column(String(200))
    tooltip = Column(String(50))
    attribute_type = Column(String(50))
    level = Column(Integer)
    next_value = Column(Integer)
    reason_for_zero = Column(String(50))    # Maybe remove
    modifier = Column(Float)
    hidden = Column(Boolean)
    current = Column(Integer)

    # Extra Ability columns
    error = Column(String(50))
    name = Column(String(50))

    __mapper_args__ = {
        'polymorphic_identity': "Proficiency",
        'polymorphic_on': type_
    }

    def __init__(self, level=0, modifier=1.0):
        self.type_ = self.__class__.__name__
        self.name = normalize_attrib_name(self.type_)
        self.tooltip = ""
        self.level = level
        self.modifier = modifier
        self.current = self.get_final()

    def level_up(self):
        self.level += 1
        self.current = self.get_final()

    def get_base(self):
        """Return some function of the level attribute."""
        return self.level

    def get_final(self):
        """Return the modifier * the base."""
        return self.get_base() * self.modifier

    def get_percent(self):
        """Return the percent of the current to the final value."""
        try:
            return round(self.current / self.get_final(), 2) * 100
        except ZeroDivisionError:
            return 0


class Health(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Health"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How much you can take before you die"
        self.attribute_type = "Vitality"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Health's attributes and tooltip variable.
        """

        return round(2 * self.level + 5, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Regeneration(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Regeneration"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How quickly your wounds heal"
        self.attribute_type = "Vitality"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Regeneration's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 1, 2)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Recovery(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Recovery"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How quickly you recover from poisons and negative effects"
        self.attribute_type = "Vitality"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Recovery's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Climbing(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Climbing"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Your ability to climb obstacles"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Climbing's attributes and tooltip variable.
        """

        return round(0.5 * self.level + 0.5, 1)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Storage(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Storage"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Your carrying capacity"
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Storage's attributes and tooltip variable.
        """

        return round(2 * self.level + 10, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Encumbrance(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Encumbrance"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How much your are slowed down in combat by your equipment"
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Encumbrance's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Endurance(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Endurance"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Actions performed each day"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Endurance's attributes and tooltip variable.
        """

        return round(1 * self.level + 3, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Damage(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Damage"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How much damage you do on each hit"
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Damage's attributes and tooltip variable.
        """

        return round(1 * self.level + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Speed(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Speed"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How fast you attack"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Speed's attributes and tooltip variable.
        """

        return round(0.03 * self.level + 1, 2)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Accuracy(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Accuracy"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "The chance of your attacks hitting their target."
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Accuracy's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 35, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class FirstStrike(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "FirstStrike"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Chance to strike first"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update FirstStrike's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Killshot(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Killshot"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to hit enemies in their weak spot"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Killshot's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Defence(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Defence"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Damage reduction"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Defence's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Evade(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Evade"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Chance to dodge"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Evade's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 5, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Parry(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Parry"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Chance to parry"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Parry's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 2, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Flee(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Flee"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Chance to run from a battle"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Flee's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 7, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Riposte(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Riposte"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Chance to riposte an enemy attack"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Riposte's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Fatigue(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Fatigue"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How quickly you tire in combat"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Fatigue's attributes and tooltip variable.
        """

        return round(1 * self.level + 5, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Block(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Block"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to block if a shield is equipped"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Block's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    def check_shield(self, hero):
        if hero.inventory.left_hand is None or hero.inventory.left_hand.type != "Shield":
            self.chance = 0
            self.reason_for_zero = "You must have a shield equipped"
        else:
            self.reason_for_zero = ""

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Stealth(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Stealth"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Chance to avoid detection"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Stealth's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 3, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Pickpocketing(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Pickpocketing"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Skill at stealing from others"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Pickpocketing's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 1, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Faith(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Faith"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Strength of spells you cast"
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Faith's attributes and tooltip variable.
        """

        return round(0.1 * self.level + 1, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Sanctity(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Sanctity"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Amount of sanctity you can have"
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Sanctity's attributes and tooltip variable.
        """

        return round(3 * self.level + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class ResistHoly(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistHoly"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to resist holy damage"
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update ResistHoly's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Bartering(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Bartering"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Discount from negotiating prices"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Bartering's attributes and tooltip variable.
        """

        return round(-0.05 * self.level + 1, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Oration(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Oration"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Proficiency in speaking to others"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Oration's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 11, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Charm(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Charm"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How quickly other people will like you"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Charm's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 3, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Trustworthiness(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Trustworthiness"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How much other players trust you"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Trustworthiness's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Renown(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Renown"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How much your actions affect your reputation"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Renown's attributes and tooltip variable.
        """

        return round(0.1 * self.level + 1, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Knowledge(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Knowledge"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to understand"
        self.attribute_type = "Intellect"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Knowledge's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 6, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Literacy(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Literacy"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to read"
        self.attribute_type = "Intellect"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Literacy's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Understanding(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Understanding"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How quickly you level up"
        self.attribute_type = "Intellect"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Understanding's attributes and tooltip variable.
        """

        return round(0.05 * self.level + 1, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Luckiness(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Luckiness"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Chance to have things turn your way against all odds"
        self.attribute_type = "Fortuity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Luckiness's attributes and tooltip variable.
        """

        return round(0.01 * self.level + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Adventuring(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Adventuring"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Chance to discover treasure"
        self.attribute_type = "Fortuity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Adventuring's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Logistics(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Logistics"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "How far you can move on the map"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Logistics's attributes and tooltip variable.
        """

        return round(0.2 * self.level + 1, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Mountaineering(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Mountaineering"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Modifier for mountain movement"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Mountaineering's attributes and tooltip variable.
        """

        return round(0.5 * self.level + 1, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Woodsman(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Woodsman"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Modifier for forest movement"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Woodsman's attributes and tooltip variable.
        """

        return round(0.5 * self.level + 1, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Navigator(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Navigator"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Modifier for water movement"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Navigator's attributes and tooltip variable.
        """

        return round(0.5 * self.level + 1, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Detection(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Detection"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Chance to discover enemy stealth and traps"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Detection's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Caution(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Caution"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "See information about a new grid before going there"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Caution's attributes and tooltip variable.
        """

        return round(0.5 * self.level + 0.5, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Explorer(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Explorer"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Additional options on the map, such as foraging"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Explorer's attributes and tooltip variable.
        """

        return round(0.5 * self.level + 0.5, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Huntsman(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Huntsman"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Learn additional information about enemies"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Huntsman's attributes and tooltip variable.
        """

        return round(0.5 * self.level + 0.5, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Survivalist(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Survivalist"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Create bandages, tents, and other useful objects"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Survivalist's attributes and tooltip variable.
        """

        return round(0.5 * self.level + 0.5, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class ResistFrost(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistFrost"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to resist frost damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update ResistFrost's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class ResistFlame(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistFlame"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to resist flame damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update ResistFlame's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class ResistShadow(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistShadow"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to resist shadow damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update ResistShadow's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class ResistPoison(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistPoison"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to resist poison damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update ResistPoison's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class ResistBlunt(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistBlunt"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to resist blunt damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update ResistBlunt's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class ResistSlashing(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistSlashing"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to resist slashing damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update ResistSlashing's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class ResistPiercing(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistPiercing"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Ability to resist piercing damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update ResistPiercing's attributes and tooltip variable.
        """

        return round((100 * self.level)**0.5 - (self.level / 4) + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Courage(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Courage"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Your ability to overcome fears"
        self.attribute_type = "Willpower"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Courage's attributes and tooltip variable.
        """

        return round(1 * self.level + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)


class Sanity(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Sanity"
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.description = "Your ability to resist mind altering affects"
        self.attribute_type = "Willpower"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def get_base(self):
        """Update Sanity's attributes and tooltip variable.
        """

        return round(1 * self.level + 0, 0)

    @property
    def current_tootip(self):
        """Create a tooltip for each variable.
        """
        tooltips = []
        for attrib in ['get_base()', 'modifier', 'get_final()',
                       'current', 'get_percent()']:
            # This creates a tooltip for each variable
            tooltips.append("{}: {}".format(attrib.capitalize(), getattr(
                self, attrib, 'error')))

        # This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips)
        return ';'.join(tooltips)




'''
Old code that might need to be readded at some point.
@staticmethod
    def keys():
        return [{% for value in prof[3] %}'{{ normalize_attrib_name(value[0]) }}'{% if not loop.last %}, {% endif %}{% endfor %}]

    def items(self):
        """Basically a dict.items() clone that looks like ((key, value),
            (key, value), ...)

        This is an iterator? Maybe it should be a list or a view?
        """
        return ((key, getattr(self, key)) for key in self.keys())

    def __iter__(self):
        """Return all the attributes of this object as an iterator."""
        return (key for key in self.keys())
'''