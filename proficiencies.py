"""This file is generated by "data/build_code.py"
It has been set to read only so that you don't edit it without using
build_code.py.
"""

from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship

from base_classes import Base

from math import sin
from math import floor

# Name, Description, Attribute_Type, Type, [(Values Name, Value type, (Modifiers of value))]
PROFICIENCY_INFORMATION = [
    ("Health", "How fast you attack", "Vitality", "Offense", [("Maximum", "damage", (2, 10, 5))]),
    ("Sanctity", "How fast you attack", "Divinity", "Offense", [("Maximum", "damage", (2, 10, 5))]),
    ("Storage", "How fast you attack", "Strength", "Offense", [("Maximum", "damage", (2, 10, 5))]),
    ("Endurance", "How fast you attack", "Fortitude", "Offense", [("Maximum", "damage", (2, 10, 5))]),
    ("Attack damage", "How hard you hit", "Strength", "Offense", [("Minimum", "damage", (0.5, 0.3, 1.5)), ("Maximum",  "damage", (0.6, 0.3, 1.5)), ("Average",  "damage", (0.55, 0.3, 1.5))]),
    ("Attack speed", "How fast you attack", "Agility", "Offense", [("Speed", "percent", (2, 10, 5))]),
    ("Attack accuracy", "Chance to hit", "Agility", "Offense", [("Accuracy", "percent", (2, 10, 5))]),
    ("First strike", "Chance to strike first", "Agility", "Offense", [("Chance", "percent", (2, 10, 5))]),
    ("Critical hit", "Ability to hit your enemy's weakspots", "Perception", "Offense", [("Chance", "percent", (2, 10, 5)), ("Modifier", "percent", (2, 10, 5))]),
    ("Defence", "Damage reduction", "Fortitude", "Defence", [("Modifier", "percent", (2, 10, 5))]),
    ("Evade", "Chance to dodge", "Reflexes", "Defence", [("Chance", "percent", (2, 10, 5))]),
    ("Parry", "Chance to parry", "Reflexes", "Defence", [("Chance", "percent", (2, 10, 5))]),
    ("Riposte", "Chance to riposte", "Agility", "Defence", [("Chance", "percent", (2, 10, 5))]),
    ("Block", "Ability to block if a shield is equipped", "Strength", "Defence", [("Chance", "percent", (2, 10, 5)), ("Modifier", "percent", (2, 10, 5))]),
    ("Stealth", "Chance to avoid detection", "Perception", "Stealth", [("Chance", "percent", (2, 10, 5))]),
    ("Pickpocketing", "Chance to steal", "Agility", "Stealth", [("Chance", "percent", (2, 10, 5))]),
    ("Faith", "Ability to cast spells", "Divinity", "Holiness", [("Modifier", "percent", (2, 10, 5))]),
    ("Bartering", "Chance to negotiate prices", "Charisma", "Diplomacy", [("Chance", "percent", (2, 10, 5))]),
    ("Oration", "Ability to speak", "Strength", "Wisdom", [("Modifier", "percent", (2, 10, 5))]),
    ("Knowledge", "Ability to understand", "Wisdom", "Diplomacy", [("Modifier", "percent", (2, 10, 5))]),
    ("Literacy", "Ability to read", "Wisdom", "Diplomacy", [("Modifier", "percent", (2, 10, 5))]),
    ("Luck", "Chance to have things turn your way against all odds", "Fortuity", "Diplomacy", [("Chance", "percent", (2, 10, 5))]),
    ("Resist frost", "Ability to resist frost damage", "Resilience", "Resistance", [("Modifier", "percent", (2, 10, 5))]),
    ("Resist flame", "Ability to resist flame damage", "Resilience", "Resistance", [("Modifier", "percent", (2, 10, 5))]),
    ("Resist shadow", "Ability to resist shadow damage", "Resilience", "Resistance", [("Modifier", "percent", (2, 10, 5))]),
    ("Resist holy", "Ability to resist holy damage", "Resilience", "Resistance", [("Modifier", "percent", (2, 10, 5))]),
    ("Resist poison", "Ability to resist poison damage", "Resilience", "Resistance", [("Modifier", "percent", (2, 10, 5))]),
    ("Resist blunt", "Ability to resist blunt damage", "Resilience", "Resistance", [("Modifier", "percent", (2, 10, 5))]),
    ("Resist slashing", "Ability to resist slashing damage", "Resilience", "Resistance", [("Modifier", "percent", (2, 10, 5))]),
    ("Resist piercing", "Ability to resist piercing damage", "Resilience", "Resistance", [("Modifier", "percent", (2, 10, 5))])
    ]


ALL_PROFICIENCIES = [attrib[0].lower().replace(" ", "_") for attrib in PROFICIENCY_INFORMATION]

class Proficiencies(Base):
    __tablename__ = 'proficiencies'
    
    id = Column(Integer, primary_key=True)

    #Relationships
    health_id = Column(Integer, ForeignKey('proficiency.id'))
    health = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.health_id]")
    sanctity_id = Column(Integer, ForeignKey('proficiency.id'))
    sanctity = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.sanctity_id]")
    storage_id = Column(Integer, ForeignKey('proficiency.id'))
    storage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.storage_id]")
    endurance_id = Column(Integer, ForeignKey('proficiency.id'))
    endurance = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.endurance_id]")
    attack_damage_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_damage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_damage_id]")
    attack_speed_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_speed = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_speed_id]")
    attack_accuracy_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_accuracy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_accuracy_id]")
    first_strike_id = Column(Integer, ForeignKey('proficiency.id'))
    first_strike = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.first_strike_id]")
    critical_hit_id = Column(Integer, ForeignKey('proficiency.id'))
    critical_hit = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.critical_hit_id]")
    defence_id = Column(Integer, ForeignKey('proficiency.id'))
    defence = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.defence_id]")
    evade_id = Column(Integer, ForeignKey('proficiency.id'))
    evade = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.evade_id]")
    parry_id = Column(Integer, ForeignKey('proficiency.id'))
    parry = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.parry_id]")
    riposte_id = Column(Integer, ForeignKey('proficiency.id'))
    riposte = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.riposte_id]")
    block_id = Column(Integer, ForeignKey('proficiency.id'))
    block = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.block_id]")
    stealth_id = Column(Integer, ForeignKey('proficiency.id'))
    stealth = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.stealth_id]")
    pickpocketing_id = Column(Integer, ForeignKey('proficiency.id'))
    pickpocketing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.pickpocketing_id]")
    faith_id = Column(Integer, ForeignKey('proficiency.id'))
    faith = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.faith_id]")
    bartering_id = Column(Integer, ForeignKey('proficiency.id'))
    bartering = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.bartering_id]")
    oration_id = Column(Integer, ForeignKey('proficiency.id'))
    oration = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.oration_id]")
    knowledge_id = Column(Integer, ForeignKey('proficiency.id'))
    knowledge = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.knowledge_id]")
    literacy_id = Column(Integer, ForeignKey('proficiency.id'))
    literacy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.literacy_id]")
    luck_id = Column(Integer, ForeignKey('proficiency.id'))
    luck = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.luck_id]")
    resist_frost_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_frost = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_frost_id]")
    resist_flame_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_flame = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_flame_id]")
    resist_shadow_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_shadow = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_shadow_id]")
    resist_holy_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_holy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_holy_id]")
    resist_poison_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_poison = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_poison_id]")
    resist_blunt_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_blunt = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_blunt_id]")
    resist_slashing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_slashing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_slashing_id]")
    resist_piercing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_piercing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_piercing_id]")
    
    def __init__(self):
        
        self.health = Health("Health", "How fast you attack", "Vitality", "Offense")
        self.sanctity = Sanctity("Sanctity", "How fast you attack", "Divinity", "Offense")
        self.storage = Storage("Storage", "How fast you attack", "Strength", "Offense")
        self.endurance = Endurance("Endurance", "How fast you attack", "Fortitude", "Offense")
        self.attack_damage = AttackDamage("Attack damage", "How hard you hit", "Strength", "Offense")
        self.attack_speed = AttackSpeed("Attack speed", "How fast you attack", "Agility", "Offense")
        self.attack_accuracy = AttackAccuracy("Attack accuracy", "Chance to hit", "Agility", "Offense")
        self.first_strike = FirstStrike("First strike", "Chance to strike first", "Agility", "Offense")
        self.critical_hit = CriticalHit("Critical hit", "Ability to hit your enemy's weakspots", "Perception", "Offense")
        self.defence = Defence("Defence", "Damage reduction", "Fortitude", "Defence")
        self.evade = Evade("Evade", "Chance to dodge", "Reflexes", "Defence")
        self.parry = Parry("Parry", "Chance to parry", "Reflexes", "Defence")
        self.riposte = Riposte("Riposte", "Chance to riposte", "Agility", "Defence")
        self.block = Block("Block", "Ability to block if a shield is equipped", "Strength", "Defence")
        self.stealth = Stealth("Stealth", "Chance to avoid detection", "Perception", "Stealth")
        self.pickpocketing = Pickpocketing("Pickpocketing", "Chance to steal", "Agility", "Stealth")
        self.faith = Faith("Faith", "Ability to cast spells", "Divinity", "Holiness")
        self.bartering = Bartering("Bartering", "Chance to negotiate prices", "Charisma", "Diplomacy")
        self.oration = Oration("Oration", "Ability to speak", "Strength", "Wisdom")
        self.knowledge = Knowledge("Knowledge", "Ability to understand", "Wisdom", "Diplomacy")
        self.literacy = Literacy("Literacy", "Ability to read", "Wisdom", "Diplomacy")
        self.luck = Luck("Luck", "Chance to have things turn your way against all odds", "Fortuity", "Diplomacy")
        self.resist_frost = ResistFrost("Resist frost", "Ability to resist frost damage", "Resilience", "Resistance")
        self.resist_flame = ResistFlame("Resist flame", "Ability to resist flame damage", "Resilience", "Resistance")
        self.resist_shadow = ResistShadow("Resist shadow", "Ability to resist shadow damage", "Resilience", "Resistance")
        self.resist_holy = ResistHoly("Resist holy", "Ability to resist holy damage", "Resilience", "Resistance")
        self.resist_poison = ResistPoison("Resist poison", "Ability to resist poison damage", "Resilience", "Resistance")
        self.resist_blunt = ResistBlunt("Resist blunt", "Ability to resist blunt damage", "Resilience", "Resistance")
        self.resist_slashing = ResistSlashing("Resist slashing", "Ability to resist slashing damage", "Resilience", "Resistance")
        self.resist_piercing = ResistPiercing("Resist piercing", "Ability to resist piercing damage", "Resilience", "Resistance")
        

    def items(self):
        """Returns a list of 2-tuples

        Basically a dict.items() clone that looks like ([(key, value), (key, value), ...])
        """
        return ((key, getattr(self, key)) for key in ALL_PROFICIENCIES)
        
        
    def __iter__(self):
        return (getattr(self, key) for key in ALL_PROFICIENCIES)

        
class Proficiency(Base):
    """Proficiency class that stores data about a hero object.
    """
    __tablename__ = "proficiency"
    
    id = Column(Integer, primary_key=True)

    name = Column(String)
    description = Column(String)
    attribute_type = Column(String)
    type = Column(String)
    level = Column(Integer)
    next_value = Column(Integer)
    is_not_max_level = Column(Boolean)
    
    _class = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Proficiency",
        'polymorphic_on':_class
    }

    def __init__(self, name, description, attribute_type, type):
        self.name = name
        self.description = description
        self.attribute_type = attribute_type
        self.type = type
        
        self.level = 1
        self.is_not_max_level = False

    def level_up(self):
        self.level += 1


class Health(Proficiency):
    __tablename__ = "health"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Health",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.error = "You do not have enough vitality"
        self.formatted_name = "health"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.vitality.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = round(math.floor(3 * (2*math.sin(5*self.level) + 10*self.level)), 2)
        self.description += "Maximum: " + str(self.maximum)
        
class Sanctity(Proficiency):
    __tablename__ = "sanctity"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Sanctity",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.error = "You do not have enough divinity"
        self.formatted_name = "sanctity"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.divinity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = round(math.floor(3 * (2*math.sin(5*self.level) + 10*self.level)), 2)
        self.description += "Maximum: " + str(self.maximum)
        
class Storage(Proficiency):
    __tablename__ = "storage"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Storage",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.error = "You do not have enough strength"
        self.formatted_name = "storage"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = round(math.floor(3 * (2*math.sin(5*self.level) + 10*self.level)), 2)
        self.description += "Maximum: " + str(self.maximum)
        
class Endurance(Proficiency):
    __tablename__ = "endurance"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Endurance",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.error = "You do not have enough fortitude"
        self.formatted_name = "endurance"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.fortitude.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = round(math.floor(3 * (2*math.sin(5*self.level) + 10*self.level)), 2)
        self.description += "Maximum: " + str(self.maximum)
        
class AttackDamage(Proficiency):
    __tablename__ = "attack_damage"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    minimum = Column(Integer)
    maximum = Column(Integer)
    average = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"AttackDamage",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.minimum = 0
        self.maximum = 0
        self.average = 0
        self.error = "You do not have enough strength"
        self.formatted_name = "attack_damage"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.minimum = round(math.floor(3 * (0.5*math.sin(1.5*self.level) + 0.3*self.level)), 2)
        self.description += "Minimum: " + str(self.minimum)
        self.maximum = round(math.floor(3 * (0.6*math.sin(1.5*self.level) + 0.3*self.level)), 2)
        self.description += "Maximum: " + str(self.maximum)
        self.average = round(math.floor(3 * (0.55*math.sin(1.5*self.level) + 0.3*self.level)), 2)
        self.description += "Average: " + str(self.average)
        
class AttackSpeed(Proficiency):
    __tablename__ = "attack_speed"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    speed = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"AttackSpeed",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.speed = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "attack_speed"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.speed = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Speed: " + str(self.speed)
        
class AttackAccuracy(Proficiency):
    __tablename__ = "attack_accuracy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    accuracy = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"AttackAccuracy",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.accuracy = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "attack_accuracy"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.accuracy = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Accuracy: " + str(self.accuracy)
        
class FirstStrike(Proficiency):
    __tablename__ = "first_strike"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"FirstStrike",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "first_strike"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        
class CriticalHit(Proficiency):
    __tablename__ = "critical_hit"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"CriticalHit",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.modifier = 0
        self.error = "You do not have enough perception"
        self.formatted_name = "critical_hit"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.perception.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class Defence(Proficiency):
    __tablename__ = "defence"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Defence",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough fortitude"
        self.formatted_name = "defence"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.fortitude.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class Evade(Proficiency):
    __tablename__ = "evade"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Evade",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough reflexes"
        self.formatted_name = "evade"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.reflexes.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        
class Parry(Proficiency):
    __tablename__ = "parry"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Parry",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough reflexes"
        self.formatted_name = "parry"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.reflexes.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        
class Riposte(Proficiency):
    __tablename__ = "riposte"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Riposte",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "riposte"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        
class Block(Proficiency):
    __tablename__ = "block"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Block",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.modifier = 0
        self.error = "You do not have enough strength"
        self.formatted_name = "block"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class Stealth(Proficiency):
    __tablename__ = "stealth"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Stealth",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough perception"
        self.formatted_name = "stealth"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.perception.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        
class Pickpocketing(Proficiency):
    __tablename__ = "pickpocketing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Pickpocketing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "pickpocketing"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        
class Faith(Proficiency):
    __tablename__ = "faith"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Faith",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough divinity"
        self.formatted_name = "faith"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.divinity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class Bartering(Proficiency):
    __tablename__ = "bartering"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Bartering",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough charisma"
        self.formatted_name = "bartering"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.charisma.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        
class Oration(Proficiency):
    __tablename__ = "oration"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Oration",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough strength"
        self.formatted_name = "oration"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class Knowledge(Proficiency):
    __tablename__ = "knowledge"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Knowledge",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough wisdom"
        self.formatted_name = "knowledge"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.wisdom.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class Literacy(Proficiency):
    __tablename__ = "literacy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Literacy",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough wisdom"
        self.formatted_name = "literacy"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.wisdom.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class Luck(Proficiency):
    __tablename__ = "luck"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Luck",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough fortuity"
        self.formatted_name = "luck"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.fortuity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Chance: " + str(self.chance)
        
class ResistFrost(Proficiency):
    __tablename__ = "resist_frost"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistFrost",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_frost"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class ResistFlame(Proficiency):
    __tablename__ = "resist_flame"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistFlame",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_flame"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class ResistShadow(Proficiency):
    __tablename__ = "resist_shadow"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistShadow",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_shadow"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class ResistHoly(Proficiency):
    __tablename__ = "resist_holy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistHoly",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_holy"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class ResistPoison(Proficiency):
    __tablename__ = "resist_poison"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistPoison",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_poison"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class ResistBlunt(Proficiency):
    __tablename__ = "resist_blunt"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistBlunt",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_blunt"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class ResistSlashing(Proficiency):
    __tablename__ = "resist_slashing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistSlashing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_slashing"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        
class ResistPiercing(Proficiency):
    __tablename__ = "resist_piercing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistPiercing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_piercing"
        
    def update(self, myHero):
        self.description = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = round((- (10*5)/((2 * self.level) + 10) + 5) * 8, 2)
        self.description += "Modifier: " + str(self.modifier)
        

    # Do I need this? Is this related to my bug? :'(
    """
    def __iter__(self):
        pass
    """


#//////////////////////////////////////////////////////////////////////////////#
#                                                                              #
#  Author: Elthran B, Jimmy Zhang                                              #
#  Email : jimmy.gnahz@gmail.com                                               #
#                                                                              #
#//////////////////////////////////////////////////////////////////////////////#

"""All secondary functions are determined in this file. They follow the same pattern:
    - Set up the ratio of attributes
    - Scale the attribute
    - (Optional) Round the decimal place if needed
    That way you can easily either adjust the ratio or you can adjust the scaling!

    y = -(10c / (ax + 10)) + c  => the smaller a is, the slower it reaches the cap, c
    y = a sin(cx) + bx  => where b is slope, a is steepness, and c is frequency

    """

import math

def update_minimum_damage(myHero):
    """ Minimum amount of damage you can do when hitting an opponent """
    minimum_damage = (5 * myHero.attributes.strength.level) + (1 * myHero.attributes.agility.level)
    minimum_damage = 0.1 * math.sin(minimum_damage) + 0.2 * minimum_damage
    minimum_damage = math.floor(minimum_damage)
    return minimum_damage

def update_maximum_damage(myHero):
    """ Maximum amount of damage you can do when hitting an opponent """
    maximum_damage = (1 * myHero.attributes.strength.level) + (4 * myHero.attributes.agility.level)
    maximum_damage = 0.2 * math.sin(maximum_damage) + 0.3 * maximum_damage + update_minimum_damage(myHero)
    maximum_damage = math.floor(maximum_damage)
    return maximum_damage

def update_attack_speed(myHero):
    """ Not sure yet. """
    attack_speed = (7 * myHero.attributes.agility.level) + (2 * myHero.attributes.reflexes.level)
    attack_speed = - (10 / (attack_speed * 0.006 + 10)) + 1
    attack_speed = round(attack_speed, 2)
    return attack_speed

def update_attack_accuracy(myHero):
    """ Chance of successfully hitting an enemy in combat """
    attack_accuracy = (8 * myHero.attributes.agility.level) + (3 * myHero.attributes.reflexes.level) + (1 * myHero.attributes.perception.level)
    attack_accuracy = - (500 / (attack_accuracy * 0.08 + 10)) + 50
    attack_accuracy = math.floor(attack_accuracy)
    return attack_accuracy

def update_first_strike_chance(myHero):
    """ Not sure yet. """
    first_strike_chance = (5 * myHero.attributes.agility.level) + (2 * myHero.attributes.reflexes.level)
    first_strike_chance = - (300 / (first_strike_chance * 0.07 + 10)) + 30
    first_strike_chance = math.floor(first_strike_chance)
    return first_strike_chance

def update_critical_hit_chance(myHero):
    """ Chance of hitting the enemy in a critical location, causing bonus damage """
    critical_hit_chance = (7 * myHero.attributes.agility.level) + (2 * myHero.attributes.perception.level)
    critical_hit_chance = - (300 / (critical_hit_chance * 0.07 + 10)) + 30
    critical_hit_chance = math.floor(critical_hit_chance)
    return critical_hit_chance

def update_critical_hit_modifier(myHero):
    """ How much extra damage you do when you critical hit """
    critical_hit_modifier = (1 * update_maximum_damage(myHero)) + (5 * myHero.attributes.agility.level)
    critical_hit_modifier = 0.05 * math.sin(critical_hit_modifier) + 0.007 * critical_hit_modifier + 1
    critical_hit_modifier = round(critical_hit_modifier, 1)
    return critical_hit_modifier

def update_defence_modifier(myHero):
    """ The % of damage reduced when hit """
    defence_modifier = (6 * myHero.attributes.resilience.level)
    defence_modifier = - (350 / (defence_modifier * 0.09 + 10)) + 35
    defence_modifier = math.floor(defence_modifier)
    return defence_modifier

def update_evade_chance(myHero):
    """ Chance to dodge an attack in combat """
    evade_chance = (5 * myHero.attributes.reflexes.level) + (2 * myHero.attributes.perception.level)
    evade_chance = - (250 / (evade_chance * 0.08 + 10)) + 25
    evade_chance = math.floor(evade_chance)
    return evade_chance

def update_parry_chance(myHero):
    """ Chance to parry when fighting with a weapon """
    parry_chance = (5 * myHero.attributes.reflexes.level) + (1 * myHero.attributes.agility.level) + (3 * myHero.attributes.perception.level)
    parry_chance = - (400 / (parry_chance * 0.1 + 10)) + 40
    parry_chance = math.floor(parry_chance)
    return parry_chance

def update_riposte_chance(myHero):
    """ Chance of counter attacking after a successful parry """
    riposte_chance = (5 * myHero.attributes.agility.level) + (3 * myHero.attributes.perception.level) + (1 * myHero.attributes.reflexes.level)
    riposte_chance = - (400 / (riposte_chance * 0.1 + 10)) + 40
    riposte_chance = math.floor(riposte_chance)
    return riposte_chance

def update_block_chance(myHero):
    """ Chance to blck when using a shield """
    block_chance = (5 * myHero.attributes.reflexes.level) + (3 * myHero.attributes.agility.level) + (2 * myHero.attributes.strength.level)
    block_chance = - (400 / (block_chance * 0.08 + 10)) + 40
    block_chance = math.floor(block_chance)
    return block_chance

def update_block_reduction(myHero):
    """ Percent of damage reduced when you successfully block """
    block_reduction = (2 * myHero.attributes.strength.level) + (2 * myHero.attributes.resilience.level)
    block_reduction = - (400 / (block_reduction * 0.08 + 10)) + 40
    block_reduction = math.floor(block_reduction)
    return block_reduction

def update_stealth_skill(myHero):
    """ Chance of being undetected """
    stealth_skill = (5 * myHero.attributes.reflexes.level) + (3 * myHero.attributes.perception.level) + (2 * myHero.attributes.agility.level)
    stealth_skill = - (250 / (stealth_skill * 0.05 + 10)) + 25
    stealth_skill = math.floor(stealth_skill)
    return stealth_skill

def update_faith(myHero):
    """ Spell Power/Damage """
    faith = (5 * myHero.attributes.divinity.level) + (1 * myHero.attributes.wisdom.level)
    faith = 0.1 * math.sin(faith) + 0.2 * faith
    faith = math.floor(faith)
    return faith

def update_bartering(myHero):
    """ A modifier to the price you pay at stores """
    bartering = (9 * myHero.attributes.charisma.level) + (1 * myHero.attributes.wisdom.level)
    bartering = - (250 / (bartering * 0.05 + 10)) + 25
    bartering = math.floor(bartering)
    return bartering

def update_oration(myHero):
    """ Determines success rate of dialogue as well as which dialogue options are open to you """
    oration = (5 * myHero.attributes.charisma.level) + (3 * myHero.attributes.wisdom.level)
    oration = - (250 / (oration * 0.05 + 10)) + 25
    oration = math.floor(oration)
    return oration

def update_knowledge(myHero):
    """ Determines how much your character knows about the world """
    knowledge = (10 * myHero.attributes.wisdom.level) + (1 * myHero.attributes.perception.level)
    knowledge = 0.1 * math.sin(knowledge) + 0.2 * knowledge
    knowledge = math.floor(knowledge)
    return knowledge

def update_luck_chance(myHero):
    """ This can be applied to almost anything in the game. Chance for a really lucky outcome """
    luck_chance = (5 * myHero.attributes.fortuity.level)
    luck_chance = - (50 / (luck_chance * 0.01 + 10)) + 5
    luck_chance = math.floor(luck_chance)
    return luck_chance

def update_sanctity_maximum(myHero):
    """ Basically your mana. Required to cast spells and use abilities. Should slowly recover over time. """
    sanctity_maximum = (5 * myHero.attributes.divinity.level) + (1 * myHero.attributes.wisdom.level) + 3
    sanctity_maximum = 0.1 * math.sin(sanctity_maximum) + 0.2 * sanctity_maximum
    sanctity_maximum = math.floor(sanctity_maximum)
    return sanctity_maximum

def update_health_maximum(myHero):
    """ How much health your Hero has. At zero, you die. """
    maximum_health = (10 * myHero.attributes.vitality.level) + (2 * myHero.attributes.resilience.level) + (1 * myHero.attributes.strength.level) + 10
    maximum_health = 0.1 * math.sin(maximum_health) + 0.25 * maximum_health
    maximum_health = math.floor(maximum_health)
    return maximum_health

def update_endurance_maximum(myHero):
    """ How many actions you can perform, such as moving on the map or fighting. It slowly recovers over time. """
    endurance_maximum = (5 * myHero.attributes.fortitude.level) + (1 * myHero.attributes.resilience.level) + (1 * myHero.attributes.strength.level) + 25
    endurance_maximum = 0.1 * math.sin(endurance_maximum) + 0.05 * endurance_maximum + 4
    endurance_maximum = math.floor(endurance_maximum)
    return endurance_maximum

def update_storage_maximum(myHero):
    """ How much you can carry in your inventory + items equipped. """
    storage_maximum = (5 * myHero.attributes.strength.level) + (4 * myHero.attributes.resilience.level)
    storage_maximum = 0.1 * math.sin(storage_maximum) + 0.08 * storage_maximum
    storage_maximum = math.floor(storage_maximum)
    return storage_maximum





# BELOW HERE ARE THE MONSTER SECONDARY ATTRIBUTES

def update_monster_minimum_damage(monster):
    """ Minimum amount of damage you can do when hitting an opponent """
    minimum_damage = (5 * monster.primary_attributes["Strength"]) + (1 * monster.primary_attributes["Agility"])
    minimum_damage = 0.02 * math.sin(minimum_damage) + 0.1 * minimum_damage
    minimum_damage = math.floor(minimum_damage)
    return minimum_damage

def update_monster_maximum_damage(monster):
    """ Maximum amount of damage you can do when hitting an opponent """
    maximum_damage = (1 * monster.primary_attributes["Strength"]) + (4 * monster.primary_attributes["Agility"])
    maximum_damage = 0.05 * math.sin(maximum_damage) + 0.125 * maximum_damage + update_monster_minimum_damage(monster)
    maximum_damage = math.floor(maximum_damage)
    return maximum_damage

def update_monster_attack_speed(monster):
    """ Not sure yet. """
    attack_speed = (7 * monster.primary_attributes["Agility"]) + (2 * monster.primary_attributes["Reflexes"])
    attack_speed = - (10 / (attack_speed * 0.006 + 10)) + 1
    attack_speed = round(attack_speed, 2)
    return attack_speed

def update_monster_attack_accuracy(monster):
    """ Chance of successfully hitting an enemy in combat """
    attack_accuracy = (8 * monster.primary_attributes["Agility"]) + (3 * monster.primary_attributes["Reflexes"]) + (1 * monster.primary_attributes["Perception"])
    attack_accuracy = - (500 / (attack_accuracy * 0.05 + 10)) + 50
    attack_accuracy = math.floor(attack_accuracy)
    return attack_accuracy

def update_monster_first_strike_chance(monster):
    """ Not sure yet. """
    first_strike_chance = (5 * monster.primary_attributes["Agility"]) + (2 * monster.primary_attributes["Reflexes"])
    first_strike_chance = - (300 / (first_strike_chance * 0.07 + 10)) + 30
    first_strike_chance = math.floor(first_strike_chance)
    return first_strike_chance

def update_monster_critical_hit_chance(monster):
    """ Chance of hitting the enemy in a critical location, causing bonus damage """
    critical_hit_chance = (7 * monster.primary_attributes["Agility"]) + (2 * monster.primary_attributes["Perception"])
    critical_hit_chance = - (300 / (critical_hit_chance * 0.07 + 10)) + 30
    critical_hit_chance = math.floor(critical_hit_chance)
    return critical_hit_chance

def update_monster_critical_hit_modifier(monster):
    """ How much extra damage you do when you critical hit """
    critical_hit_modifier = (1 * update_monster_maximum_damage(monster)) + (5 * monster.primary_attributes["Agility"])
    critical_hit_modifier = 0.05 * math.sin(critical_hit_modifier) + 0.007 * critical_hit_modifier + 1
    critical_hit_modifier = round(critical_hit_modifier, 1)
    return critical_hit_modifier

def update_monster_defence_modifier(monster):
    """ The % of damage reduced when hit """
    defence_modifier = (6 * monster.primary_attributes["Resilience"])
    defence_modifier = - (350 / (defence_modifier * 0.09 + 10)) + 35
    defence_modifier = math.floor(defence_modifier)
    return defence_modifier

def update_monster_evade_chance(monster):
    """ Chance to dodge an attack in combat """
    evade_chance = (5 * monster.primary_attributes["Reflexes"]) + (2 * monster.primary_attributes["Perception"])
    evade_chance = - (250 / (evade_chance * 0.08 + 10)) + 25
    evade_chance = math.floor(evade_chance)
    return evade_chance

def update_monster_parry_chance(monster):
    """ Chance to parry when fighting with a weapon """
    parry_chance = (5 * monster.primary_attributes["Reflexes"]) + (1 * monster.primary_attributes["Agility"]) + (3 * monster.primary_attributes["Perception"])
    parry_chance = - (400 / (parry_chance * 0.1 + 10)) + 40
    parry_chance = math.floor(parry_chance)
    return parry_chance

def update_monster_riposte_chance(monster):
    """ Chance of counter attacking after a successful parry """
    riposte_chance = (5 * monster.primary_attributes["Agility"]) + (3 * monster.primary_attributes["Perception"]) + (1 * monster.primary_attributes["Reflexes"])
    riposte_chance = - (400 / (riposte_chance * 0.1 + 10)) + 40
    riposte_chance = math.floor(riposte_chance)
    return riposte_chance

def update_monster_block_chance(monster):
    """ Chance to blck when using a shield """
    block_chance = (5 * monster.primary_attributes["Reflexes"]) + (3 * monster.primary_attributes["Agility"]) + (2 * monster.primary_attributes["Strength"])
    block_chance = - (400 / (block_chance * 0.08 + 10)) + 40
    block_chance = math.floor(block_chance)
    return block_chance

def update_monster_block_reduction(monster):
    """ Percent of damage reduced when you successfully block """
    block_reduction = (2 * monster.primary_attributes["Strength"]) + (2 * monster.primary_attributes["Resilience"])
    block_reduction = block_reduction ** 0.75
    block_reduction = math.floor(block_reduction)
    return block_reduction

def update_monster_stealth_skill(monster):
    """ Chance of being undetected """
    stealth_skill = (5 * monster.primary_attributes["Reflexes"]) + (3 * monster.primary_attributes["Perception"]) + (2 * monster.primary_attributes["Agility"])
    stealth_skill = - (250 / (stealth_skill * 0.05 + 10)) + 25
    stealth_skill = math.floor(stealth_skill)
    return stealth_skill

def update_monster_faith(monster):
    """ Spell Power/Damage """
    faith = (5 * monster.primary_attributes["Divinity"]) + (1 * monster.primary_attributes["Wisdom"])
    faith = (0.2 * faith) ** 0.9
    faith = math.floor(faith)
    return faith

def update_monster_luck_chance(monster):
    """ This can be applied to almost anything in the game. Chance for a really lucky outcome """
    luck_chance = (5 * monster.primary_attributes["Fortuity"])
    luck_chance = - (50 / (luck_chance * 0.01 + 10)) + 5
    luck_chance = math.floor(luck_chance)
    return luck_chance

def update_monster_sanctity_maximum(monster):
    """ Basically your mana. Required to cast spells and use abilities. Should slowly recover over time. """
    sanctity_maximum = (5 * monster.primary_attributes["Divinity"]) + (1 * monster.primary_attributes["Wisdom"]) + 3
    sanctity_maximum = (0.8 * sanctity_maximum) ** 0.9
    sanctity_maximum = math.floor(sanctity_maximum)
    return sanctity_maximum

def update_monster_health_maximum(monster):
    """ How much health your Hero has. At zero, you die. """
    health_maximum = (10 * monster.primary_attributes["Vitality"]) + (2 * monster.primary_attributes["Resilience"]) + (1 * monster.primary_attributes["Strength"]) + 10
    health_maximum = 0.1 * math.sin(health_maximum) + 0.1 * health_maximum
    health_maximum = math.floor(health_maximum)
    return health_maximum

