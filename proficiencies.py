"""
This file is generated by 'build_code.py'.
It has been set to read only so that you don't edit it without using
'build_code.py'. Thought that may change in the future.
"""

from sqlalchemy import Column, Integer, String, Boolean, Float
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declared_attr

from factories import TemplateMixin
from base_classes import Base
from flask import render_template_string

from math import sin, floor

# For testing
from pprint import pprint
import pdb

"""
Name, Description, Attribute_Type, Type, [(Values Name, Value type,
    (Modifiers of value), Decimal Places)]
Linear: (Level multiplier), (Starting Value)
Root: Not finished. Looks like square root function. Used for diminishing
    returns and things that get better the larger they are. (Starting value)
    [Currently approaches 100]

Curvy: (larger "0" means it reaches the cap quicker) (smaller [1] means it
    reaxhes the cap quicker) ([2] is the cap or maximum possible value)
    ([3] is the negative amount)
Sensitive: Like curvy but has decimals (larger [0] means it reaches the cap
    quicker) (smaller [1] means it reaches the cap quicker) ([2] is the cap
    or maximum possible value) ([3] is the negative amount)
Modifier: (larger [0] means greater amplitude), (larger [1] means greater
    steepness and faster increase), (greater [2]  means greater frequency of
    waves)
Percent: ???
Empty: Sets this value to take on the value of "maximum". Must be placed after
    "Maximum" in the list of variables
"""

"""
Prof_Name, Prof_Descr, Prof_Attrib, [Formula_Type, Base_Value, Weight, # of Decimals], hidden_boolean, percent_boolean
"""

from build_code import normalize_attrib_name

PROFICIENCY_INFORMATION = [
    ("Health", "When your health reahes zero you fall unconscious.", "Vitality", ["linear", 5, 2, 0], False),
    ("Regeneration", "How many health points you recover each day.", "Vitality", ["linear", 1, 0.5, 1], False),
    ("Recovery", "How quickly you recover from poisons and negative effects.", "Vitality", ["linear", 1, 0, 0], False),
    ("Climbing", "The difficulty of objects of which you are able to climb.", "Agility", ["linear", 0, 0, 0], False),
    ("Storage", "The amount of weight that you can carry.", "Brawn", ["linear", 10, 3, 0], False),
    ("Encumbrance", "How much your are slowed down in combat by your equipment.", "Brawn", ["linear", 100, -1, 0], False),
    ("Endurance", "Number of actions you can perform each day.", "Resilience", ["linear", 3, 0.5, 0], False),
    ("Damage minimum", "Mimimum damage you do on each hit", "Brawn", ["linear", 1, 1, 0], False),
    ("Damage maximum", "Maximum damage you do on each hit", "Brawn", ["linear", 1, 1, 0], False),
    ("Speed", "How fast you attack", "Quickness", ["linear", 1, 0.05, 2], False),
    ("Accuracy", "The chance of your attacks hitting their target.", "Agility", ["linear", 1, 1, 0], True),
    ("First strike", "Chance to strike first", "Quickness", ["linear", 1, 1, 0], True),
    ("Killshot", "Ability to hit enemies in their weak spot", "Agility", ["linear", 1, 1, 0], False),
    ("Defence", "Amount of all damage reduced.", "Resilience", ["linear", 0, 1, 0], True),
    ("Armour", "Amount of physical damage reduced.", "Resilience", ["linear", 0, 1, 0], True),
    ("Evade", "Chance to dodge", "Quickness", ["linear", 1, 1, 0], True),
    ("Parry", "Chance to parry", "Quickness", ["linear", 1, 1, 0], True),
    ("Flee", "Chance to run from a battle", "Quickness", ["linear", 1, 1, 0], True),
    ("Riposte", "Chance to riposte an enemy attack", "Agility", ["linear", 1, 1, 0], True),
    ("Fatigue", "How quickly you tire in combat", "Resilience", ["linear", 1, 1, 0], False),
    ("Block", "Ability to block if a shield is equipped", "Resilience", ["linear", 1, 1, 0], False),
    ("Stealth", "Chance to avoid detection", "Agility", ["linear", 1, 1, 0], True),
    ("Pickpocketing", "Skill at stealing from others", "Agility", ["linear", 1, 1, 0], False),
    ("Faith", "Strength of spells you cast", "Divinity", ["linear", 1, 1, 0], False),
    ("Sanctity", "Amount of sanctity you can have", "Divinity", ["linear", 1, 1, 0], False),
    ("Redemption", "Amount of sanctity you recover each day", "Divinity", ["linear", 0, 0.5, 1], False),
    ("Resist holy", "Ability to resist holy damage", "Divinity", ["linear", 1, 1, 0], False),
    ("Bartering", "Discount from negotiating prices", "Charisma", ["linear", 1, 1, 0], False),
    ("Oration", "Proficiency in speaking to others", "Charisma", ["linear", 1, 1, 0], False),
    ("Charm", "How quickly other people will like you", "Charisma", ["linear", 1, 1, 0], False),
    ("Trustworthiness", "How much other players trust you", "Charisma", ["linear", 1, 1, 0], False),
    ("Renown", "How much your actions affect your reputation", "Charisma", ["linear", 1, 1, 0], False),
    ("Knowledge", "Ability to understand", "Intellect", ["linear", 1, 1, 0], False),
    ("Literacy", "Ability to read", "Intellect", ["linear", 1, 1, 0], False),
    ("Understanding", "How much more quickly you level up.", "Intellect", ["linear", 0, 2, 0], True),
    ("Luckiness", "Chance to have things turn your way against all odds", "Fortuity", ["linear", 1, 1, 0], True),
    ("Adventuring", "Chance to discover treasure", "Fortuity", ["linear", 1, 1, 0], False),
    ("Logistics",  "How far you can move on the map", "Pathfinding", ["linear", 1, 1, 0], False),
    ("Mountaineering", "Modifier for mountain movement", "Pathfinding", ["linear", 1, 1, 0], False),
    ("Woodsman", "Modifier for forest movement", "Pathfinding", ["linear", 1, 1, 0], False),
    ("Navigator", "Modifier for water movement", "Pathfinding", ["linear", 1, 1, 0], False),
    ("Detection", "Chance to discover enemy stealth and traps", "Survivalism", ["linear", 1, 1, 0], True),
    ("Caution",  "See information about a new grid before going there", "Survivalism", ["linear", 1, 1, 0], False),
    ("Explorer", "Additional options on the map, such as foraging", "Survivalism", ["linear", 1, 1, 0], False),
    ("Huntsman", "Learn additional information about enemies", "Survivalism", ["linear", 1, 1, 0], False),
    ("Survivalist", "Create bandages, tents, and other useful objects", "Survivalism", ["linear", 1, 1, 0], False),
    ("Resist frost", "Ability to resist frost damage", "Resilience", ["linear", 1, 1, 0], True),
    ("Resist flame", "Ability to resist flame damage", "Resilience", ["linear", 1, 1, 0], True),
    ("Resist shadow", "Ability to resist shadow damage", "Resilience", ["linear", 1, 1, 0], True),
    ("Resist poison", "Ability to resist poison damage", "Resilience", ["linear", 1, 1, 0], True),
    ("Resist blunt", "Ability to resist blunt damage", "Resilience", ["linear", 1, 1, 0], True),
    ("Resist slashing", "Ability to resist slashing damage", "Resilience", ["linear", 1, 1, 0], True),
    ("Resist piercing", "Ability to resist piercing damage", "Resilience", ["linear", 1, 1, 0], True),
    ("Courage", "Your ability to overcome fears", "Willpower", ["linear", 1, 1, 0], False),
    ("Sanity", "Your ability to resist mind altering affects", "Willpower", ["linear", 1, 1, 0], False),
    ("Thorns", "Amount of damage that attackers take.", None, ["linear", 0, 0, 0], False, True)
]
ALL_NAMES = ['Accuracy', 'Adventuring', 'Armour', 'Bartering', 'Block', 'Caution', 'Charm', 'Climbing', 'Courage', 'Damage maximum', 'Damage minimum', 'Defence', 'Detection', 'Encumbrance', 'Endurance', 'Evade', 'Explorer', 'Faith', 'Fatigue', 'First strike', 'Flee', 'Health', 'Huntsman', 'Killshot', 'Knowledge', 'Literacy', 'Logistics', 'Luckiness', 'Mountaineering', 'Navigator', 'Oration', 'Parry', 'Pickpocketing', 'Recovery', 'Redemption', 'Regeneration', 'Renown', 'Resist blunt', 'Resist flame', 'Resist frost', 'Resist holy', 'Resist piercing', 'Resist poison', 'Resist shadow', 'Resist slashing', 'Riposte', 'Sanctity', 'Sanity', 'Speed', 'Stealth', 'Storage', 'Survivalist', 'Thorns', 'Trustworthiness', 'Understanding', 'Woodsman']
ALL_ATTRIBUTE_NAMES = ['accuracy', 'adventuring', 'armour', 'bartering', 'block', 'caution', 'charm', 'climbing', 'courage', 'damage_maximum', 'damage_minimum', 'defence', 'detection', 'encumbrance', 'endurance', 'evade', 'explorer', 'faith', 'fatigue', 'first_strike', 'flee', 'health', 'huntsman', 'killshot', 'knowledge', 'literacy', 'logistics', 'luckiness', 'mountaineering', 'navigator', 'oration', 'parry', 'pickpocketing', 'recovery', 'redemption', 'regeneration', 'renown', 'resist_blunt', 'resist_flame', 'resist_frost', 'resist_holy', 'resist_piercing', 'resist_poison', 'resist_shadow', 'resist_slashing', 'riposte', 'sanctity', 'sanity', 'speed', 'stealth', 'storage', 'survivalist', 'thorns', 'trustworthiness', 'understanding', 'woodsman']
ALL_CLASS_NAMES = ['Accuracy', 'Adventuring', 'Armour', 'Bartering', 'Block', 'Caution', 'Charm', 'Climbing', 'Courage', 'DamageMaximum', 'DamageMinimum', 'Defence', 'Detection', 'Encumbrance', 'Endurance', 'Evade', 'Explorer', 'Faith', 'Fatigue', 'FirstStrike', 'Flee', 'Health', 'Huntsman', 'Killshot', 'Knowledge', 'Literacy', 'Logistics', 'Luckiness', 'Mountaineering', 'Navigator', 'Oration', 'Parry', 'Pickpocketing', 'Recovery', 'Redemption', 'Regeneration', 'Renown', 'ResistBlunt', 'ResistFlame', 'ResistFrost', 'ResistHoly', 'ResistPiercing', 'ResistPoison', 'ResistShadow', 'ResistSlashing', 'Riposte', 'Sanctity', 'Sanity', 'Speed', 'Stealth', 'Storage', 'Survivalist', 'Thorns', 'Trustworthiness', 'Understanding', 'Woodsman']


class Proficiency(TemplateMixin, Base):
    """Proficiency class that stores data about a hero object.
    """
    __tablename__ = "proficiency"
    
    id = Column(Integer, primary_key=True)

    # Relationships
    # Hero to Proficiencies is One to many?
    hero_id = Column(Integer, ForeignKey('hero.id', ondelete="CASCADE"))
    hero = relationship("Hero", back_populates="base_proficiencies")

    # Proficiency to Ability is One to Many
    ability_id = Column(Integer, ForeignKey('ability.id', ondelete="CASCADE"))
    ability = relationship("Ability", back_populates="proficiencies")

    # Proficiency to Item is One to Many
    item_id = Column(Integer, ForeignKey('item.id', ondelete="CASCADE"))
    items = relationship("Item", back_populates="proficiencies")

    # Main colums
    level = Column(Integer)
    base = Column(Integer)
    modifier = Column(Float)

    type_ = Column(String(50))
    name = Column(String(50))
    attribute_type = Column(String(50))
    description = Column(String(200))
    # tooltip = Column(String(50))
    next_value = Column(Integer)
    reason_for_zero = Column(String(50))    # Maybe remove
    current = Column(Integer)
    hidden = Column(Boolean)
    error = Column(String(50))

    __mapper_args__ = {
        'polymorphic_identity': "Proficiency",
        'polymorphic_on': type_
    }

    def __init__(self, level=0, base=0, modifier=0, template=False):
        self.type_ = self.__class__.__name__
        self.name = normalize_attrib_name(self.type_)
        # self.tooltip = ""
        self.level = level
        self.base = base
        self.modifier = modifier
        self.template = template
        self.current = self.final

    def build_new_from_template(self):
        if not self.template:
            raise Exception("Only use this method if obj.template == True.")
        return self.__class__(level=self.level, base=self.base,
                              modifier=self.modifier, template=False)

    def level_up(self):
        self.level += 1
        self.current = self.final

    def scale_by_level(self):
        """Return some function of the level attribute.

        This is different for each proficiency.
        Options are:

        "root:
        return round((100 * self.level)**0.5 - (self.level / 4), precision)
        "linear"
        return round(value1 * self.level, precision)
        "empty"
        return self.level  # Defaults to 0

        NOTE: base value has now been moved to the final function
        """
        return self.level

    @property
    def final(self):
        """Return the scaled value + base + modifier percent."""

        return (self.scale_by_level() + self.base) * (self.modifier + 1)

    @property
    def percent(self):
        """Return the percent of the current to the final value."""
        try:
            return round(self.current / self.final, 2) * 100
        except ZeroDivisionError:
            return 0

    @property
    def tooltip(self):
        """Create a tooltip for each variable.
        """

        temp = """<h1>{{ getattr(prof, 'name', "Proficiency error").title() }}</h1>
<h2>{{ getattr(prof, 'description', "Proficiency error").title() }}</h2>
<h2>Current: {{ getattr(prof, 'current', "Proficiency error") }}</h2>
<h2>Next Level: {{ getattr(prof, 'current', "Proficiency error") }}</h2>"""
        return render_template_string(temp, prof=self, getattr=getattr)


class Health(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Health"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=5, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "When your health reahes zero you fall unconscious."
        self.attribute_type = "Vitality"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Health's attributes and tooltip variable.
        """

        return round(2 * self.level, 0)


class Regeneration(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Regeneration"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How many health points you recover each day."
        self.attribute_type = "Vitality"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Regeneration's attributes and tooltip variable.
        """

        return round(0.5 * self.level, 1)


class Recovery(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Recovery"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How quickly you recover from poisons and negative effects."
        self.attribute_type = "Vitality"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Recovery's attributes and tooltip variable.
        """

        return round(0 * self.level, 0)


class Climbing(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Climbing"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "The difficulty of objects of which you are able to climb."
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Climbing's attributes and tooltip variable.
        """

        return round(0 * self.level, 0)


class Storage(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Storage"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=10, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "The amount of weight that you can carry."
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Storage's attributes and tooltip variable.
        """

        return round(3 * self.level, 0)


class Encumbrance(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Encumbrance"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=100, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How much your are slowed down in combat by your equipment."
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Encumbrance's attributes and tooltip variable.
        """

        return round(-1 * self.level, 0)


class Endurance(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Endurance"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=3, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Number of actions you can perform each day."
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Endurance's attributes and tooltip variable.
        """

        return round(0.5 * self.level, 0)


class DamageMinimum(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "DamageMinimum"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Mimimum damage you do on each hit"
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update DamageMinimum's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class DamageMaximum(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "DamageMaximum"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Maximum damage you do on each hit"
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update DamageMaximum's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Speed(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Speed"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How fast you attack"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Speed's attributes and tooltip variable.
        """

        return round(0.05 * self.level, 2)


class Accuracy(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Accuracy"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "The chance of your attacks hitting their target."
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Accuracy's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class FirstStrike(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "FirstStrike"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to strike first"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update FirstStrike's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Killshot(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Killshot"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to hit enemies in their weak spot"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Killshot's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Defence(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Defence"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Amount of all damage reduced."
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Defence's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Armour(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Armour"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Amount of physical damage reduced."
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Armour's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Evade(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Evade"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to dodge"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Evade's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Parry(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Parry"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to parry"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Parry's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Flee(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Flee"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to run from a battle"
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Flee's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Riposte(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Riposte"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to riposte an enemy attack"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Riposte's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Fatigue(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Fatigue"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How quickly you tire in combat"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Fatigue's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Block(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Block"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to block if a shield is equipped"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Block's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)

    def check_shield(self, hero):
        if hero.inventory.left_hand is None or hero.inventory.left_hand.type != "Shield":
            self.chance = 0
            self.reason_for_zero = "You must have a shield equipped"
        else:
            self.reason_for_zero = ""


class Stealth(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Stealth"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to avoid detection"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Stealth's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Pickpocketing(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Pickpocketing"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Skill at stealing from others"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Pickpocketing's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Faith(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Faith"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Strength of spells you cast"
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Faith's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Sanctity(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Sanctity"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Amount of sanctity you can have"
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Sanctity's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Redemption(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Redemption"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Amount of sanctity you recover each day"
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Redemption's attributes and tooltip variable.
        """

        return round(0.5 * self.level, 1)


class ResistHoly(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistHoly"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist holy damage"
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update ResistHoly's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Bartering(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Bartering"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Discount from negotiating prices"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Bartering's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Oration(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Oration"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Proficiency in speaking to others"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Oration's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Charm(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Charm"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How quickly other people will like you"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Charm's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Trustworthiness(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Trustworthiness"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How much other players trust you"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Trustworthiness's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Renown(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Renown"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How much your actions affect your reputation"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Renown's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Knowledge(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Knowledge"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to understand"
        self.attribute_type = "Intellect"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Knowledge's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Literacy(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Literacy"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to read"
        self.attribute_type = "Intellect"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Literacy's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Understanding(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Understanding"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How much more quickly you level up."
        self.attribute_type = "Intellect"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Understanding's attributes and tooltip variable.
        """

        return round(2 * self.level, 0)


class Luckiness(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Luckiness"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to have things turn your way against all odds"
        self.attribute_type = "Fortuity"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Luckiness's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Adventuring(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Adventuring"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to discover treasure"
        self.attribute_type = "Fortuity"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Adventuring's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Logistics(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Logistics"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How far you can move on the map"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Logistics's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Mountaineering(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Mountaineering"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Modifier for mountain movement"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Mountaineering's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Woodsman(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Woodsman"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Modifier for forest movement"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Woodsman's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Navigator(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Navigator"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Modifier for water movement"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Navigator's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Detection(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Detection"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to discover enemy stealth and traps"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update Detection's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Caution(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Caution"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "See information about a new grid before going there"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Caution's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Explorer(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Explorer"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Additional options on the map, such as foraging"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Explorer's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Huntsman(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Huntsman"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Learn additional information about enemies"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Huntsman's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Survivalist(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Survivalist"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Create bandages, tents, and other useful objects"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Survivalist's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class ResistFrost(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistFrost"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist frost damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update ResistFrost's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class ResistFlame(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistFlame"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist flame damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update ResistFlame's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class ResistShadow(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistShadow"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist shadow damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update ResistShadow's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class ResistPoison(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistPoison"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist poison damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update ResistPoison's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class ResistBlunt(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistBlunt"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist blunt damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update ResistBlunt's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class ResistSlashing(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistSlashing"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist slashing damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update ResistSlashing's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class ResistPiercing(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "ResistPiercing"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist piercing damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = True

    def scale_by_level(self):
        """Update ResistPiercing's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Courage(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Courage"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your ability to overcome fears"
        self.attribute_type = "Willpower"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Courage's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Sanity(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Sanity"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your ability to resist mind altering affects"
        self.attribute_type = "Willpower"
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Sanity's attributes and tooltip variable.
        """

        return round(1 * self.level, 0)


class Thorns(Proficiency):
    __mapper_args__ = {
        'polymorphic_identity': "Thorns"
    }
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Amount of damage that attackers take."
        self.attribute_type = None
        self.error = "You do not have enough {}".format(self.attribute_type)

        # This should add a "%" to the display at the end of a prof.
        # So instead of 5 Accuracy it should say 5% accuracy.
        self.is_percent = False

    def scale_by_level(self):
        """Update Thorns's attributes and tooltip variable.
        """

        return round(0 * self.level, 0)




'''
Old code that might need to be readded at some point.
@staticmethod
    def keys():
        return [{% for value in prof[3] %}'{{ normalize_attrib_name(value[0]) }}'{% if not loop.last %}, {% endif %}{% endfor %}]

    def items(self):
        """Basically a dict.items() clone that looks like ((key, value),
            (key, value), ...)

        This is an iterator? Maybe it should be a list or a view?
        """
        return ((key, getattr(self, key)) for key in self.keys())

    def __iter__(self):
        """Return all the attributes of this object as an iterator."""
        return (key for key in self.keys())
'''