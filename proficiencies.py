"""This file is generated by "data/build_code.py"
It has been set to read only so that you don't edit it without using
build_code.py.
"""

from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship, validates

from base_classes import Base

from math import sin, floor

# Name, Description, Attribute_Type, Type, [(Values Name, Value type, (Modifiers of value))]
# Linear: Level multiplier, Base Value
# Curvy: (larger "0" means it reaches the cap quicker) (smaller "1" means it reaxhes the cap quicker) ("2" is the cap or maximum possible value) ("3" is the negative amount)
# Sensitive: Like curvy but has decimals (larger "0" means it reaches the cap quicker) (smaller "1" means it reaxhes the cap quicker) ("2" is the cap or maximum possible value) ("3" is the negative amount)
# Modifier: (larger "a" means greater amplitude), (larger "b" means greater steepness andfaster increase), (greater "c" means greater frequency of waves)
# Empty: Sets this value to take on the value of "maximum". Must be placed after "Maximum" in the list of variables
PROFICIENCY_INFORMATION = [
    ("Health", "How much you can take before you die", "Vitality", "Offense", [("Maximum", "linear", (5, 0)), ("Current", "empty")]),
    ("Sanctity", "Casting points", "Divinity", "Offense", [("Maximum", "linear", (1.5, -1)), ("Current", "empty")]),
    ("Storage", "Carrying capacity", "Strength", "Offense", [("Maximum", "linear", (2.5, 8)), ("Current", "empty")]),
    ("Endurance", "Actions performed each day", "Fortitude", "Offense", [("Maximum", "linear", (0.25, 5)), ("Current", "empty")]),
    ("Attack damage", "How hard you hit", "Strength", "Offense", [("Minimum", "curvy", (0.5, 0.1, 0.1, 0)), ("Maximum",  "curvy", (0.5, 0.2, 0.1, 1))]),
    ("Attack speed", "How fast you attack", "Agility", "Offense", [("Speed", "sensitive", (0.1, 0.1, 0.7, 1))]),
    ("Attack accuracy", "Chance to hit", "Agility", "Offense", [("Accuracy", "percent", (2, 10, 5, 5))]),
    ("First strike", "Chance to strike first", "Agility", "Offense", [("Chance", "percent", (0.5, 5, 50, -30))]),
    ("Critical hit", "Ability to hit your enemy's weakspots", "Perception", "Offense", [("Chance", "percent", (0.3, 5, 50, -22)), ("Modifier", "percent", (0.5, 1, 0.5, 0))]),
    ("Defence", "Damage reduction", "Fortitude", "Defence", [("Modifier", "percent", (0.1, 7, 35, 0))]),
    ("Evade", "Chance to dodge", "Reflexes", "Defence", [("Chance", "percent", (0.1, 10, 15, 0))]),
    ("Parry", "Chance to parry", "Reflexes", "Defence", [("Chance", "percent", (0.2, 15, 15, 0))]),
    ("Riposte", "Chance to riposte", "Agility", "Defence", [("Chance", "percent", (0.3, 20, 15, 0))]),
    ("Fatigue", "How quickly you tire in combat", "Fortitude", "Defence", [("Maximum", "linear", (2, -1)), ("Current", "empty")]),
    ("Block", "Ability to block if a shield is equipped", "Strength", "Defence", [("Chance", "percent", (0.25, 25, 60, 0)), ("Modifier", "percent", (1.5, 20, 100, 0))]),
    ("Stealth", "Chance to avoid detection", "Perception", "Stealth", [("Chance", "percent", (0.5, 20, 65, 0))]),
    ("Pickpocketing", "Chance to steal", "Agility", "Stealth", [("Chance", "percent", (0.6, 15, 70, 0))]),
    ("Faith", "Ability to cast spells", "Divinity", "Holiness", [("Modifier", "percent", (2, 10, 5, 0))]),
    ("Bartering", "Chance to negotiate prices", "Charisma", "Diplomacy", [("Chance", "percent", (0.5, 20, 60, 0))]),
    ("Oration", "Ability to speak", "Strength", "Wisdom", [("Modifier", "percent", (0.75, 15, 60, 0))]),
    ("Knowledge", "Ability to understand", "Wisdom", "Diplomacy", [("Modifier", "percent", (0.1, 5, 50, 0))]),
    ("Literacy", "Ability to read", "Wisdom", "Diplomacy", [("Modifier", "percent", (0.25, 10, 75, 0))]),
    ("Luck", "Chance to have things turn your way against all odds", "Fortuity", "Diplomacy", [("Chance", "percent", (0.2, 5, 10, 0))]),
    ("Resist frost", "Ability to resist frost damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist flame", "Ability to resist flame damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist shadow", "Ability to resist shadow damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist holy", "Ability to resist holy damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist poison", "Ability to resist poison damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist blunt", "Ability to resist blunt damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist slashing", "Ability to resist slashing damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist piercing", "Ability to resist piercing damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))])
    ]


ALL_PROFICIENCIES = [attrib[0].lower().replace(" ", "_") for attrib in PROFICIENCY_INFORMATION]

class Proficiencies(Base):
    __tablename__ = 'proficiencies'
    
    id = Column(Integer, primary_key=True)

    #Relationships
    health_id = Column(Integer, ForeignKey('proficiency.id'))
    health = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.health_id]")
    sanctity_id = Column(Integer, ForeignKey('proficiency.id'))
    sanctity = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.sanctity_id]")
    storage_id = Column(Integer, ForeignKey('proficiency.id'))
    storage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.storage_id]")
    endurance_id = Column(Integer, ForeignKey('proficiency.id'))
    endurance = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.endurance_id]")
    attack_damage_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_damage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_damage_id]")
    attack_speed_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_speed = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_speed_id]")
    attack_accuracy_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_accuracy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_accuracy_id]")
    first_strike_id = Column(Integer, ForeignKey('proficiency.id'))
    first_strike = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.first_strike_id]")
    critical_hit_id = Column(Integer, ForeignKey('proficiency.id'))
    critical_hit = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.critical_hit_id]")
    defence_id = Column(Integer, ForeignKey('proficiency.id'))
    defence = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.defence_id]")
    evade_id = Column(Integer, ForeignKey('proficiency.id'))
    evade = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.evade_id]")
    parry_id = Column(Integer, ForeignKey('proficiency.id'))
    parry = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.parry_id]")
    riposte_id = Column(Integer, ForeignKey('proficiency.id'))
    riposte = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.riposte_id]")
    fatigue_id = Column(Integer, ForeignKey('proficiency.id'))
    fatigue = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.fatigue_id]")
    block_id = Column(Integer, ForeignKey('proficiency.id'))
    block = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.block_id]")
    stealth_id = Column(Integer, ForeignKey('proficiency.id'))
    stealth = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.stealth_id]")
    pickpocketing_id = Column(Integer, ForeignKey('proficiency.id'))
    pickpocketing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.pickpocketing_id]")
    faith_id = Column(Integer, ForeignKey('proficiency.id'))
    faith = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.faith_id]")
    bartering_id = Column(Integer, ForeignKey('proficiency.id'))
    bartering = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.bartering_id]")
    oration_id = Column(Integer, ForeignKey('proficiency.id'))
    oration = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.oration_id]")
    knowledge_id = Column(Integer, ForeignKey('proficiency.id'))
    knowledge = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.knowledge_id]")
    literacy_id = Column(Integer, ForeignKey('proficiency.id'))
    literacy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.literacy_id]")
    luck_id = Column(Integer, ForeignKey('proficiency.id'))
    luck = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.luck_id]")
    resist_frost_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_frost = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_frost_id]")
    resist_flame_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_flame = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_flame_id]")
    resist_shadow_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_shadow = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_shadow_id]")
    resist_holy_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_holy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_holy_id]")
    resist_poison_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_poison = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_poison_id]")
    resist_blunt_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_blunt = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_blunt_id]")
    resist_slashing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_slashing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_slashing_id]")
    resist_piercing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_piercing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_piercing_id]")
    
    def __init__(self):
        
        self.health = Health("Health", "How much you can take before you die", "Vitality", "Offense")
        self.sanctity = Sanctity("Sanctity", "Casting points", "Divinity", "Offense")
        self.storage = Storage("Storage", "Carrying capacity", "Strength", "Offense")
        self.endurance = Endurance("Endurance", "Actions performed each day", "Fortitude", "Offense")
        self.attack_damage = AttackDamage("Attack damage", "How hard you hit", "Strength", "Offense")
        self.attack_speed = AttackSpeed("Attack speed", "How fast you attack", "Agility", "Offense")
        self.attack_accuracy = AttackAccuracy("Attack accuracy", "Chance to hit", "Agility", "Offense")
        self.first_strike = FirstStrike("First strike", "Chance to strike first", "Agility", "Offense")
        self.critical_hit = CriticalHit("Critical hit", "Ability to hit your enemy's weakspots", "Perception", "Offense")
        self.defence = Defence("Defence", "Damage reduction", "Fortitude", "Defence")
        self.evade = Evade("Evade", "Chance to dodge", "Reflexes", "Defence")
        self.parry = Parry("Parry", "Chance to parry", "Reflexes", "Defence")
        self.riposte = Riposte("Riposte", "Chance to riposte", "Agility", "Defence")
        self.fatigue = Fatigue("Fatigue", "How quickly you tire in combat", "Fortitude", "Defence")
        self.block = Block("Block", "Ability to block if a shield is equipped", "Strength", "Defence")
        self.stealth = Stealth("Stealth", "Chance to avoid detection", "Perception", "Stealth")
        self.pickpocketing = Pickpocketing("Pickpocketing", "Chance to steal", "Agility", "Stealth")
        self.faith = Faith("Faith", "Ability to cast spells", "Divinity", "Holiness")
        self.bartering = Bartering("Bartering", "Chance to negotiate prices", "Charisma", "Diplomacy")
        self.oration = Oration("Oration", "Ability to speak", "Strength", "Wisdom")
        self.knowledge = Knowledge("Knowledge", "Ability to understand", "Wisdom", "Diplomacy")
        self.literacy = Literacy("Literacy", "Ability to read", "Wisdom", "Diplomacy")
        self.luck = Luck("Luck", "Chance to have things turn your way against all odds", "Fortuity", "Diplomacy")
        self.resist_frost = ResistFrost("Resist frost", "Ability to resist frost damage", "Resilience", "Resistance")
        self.resist_flame = ResistFlame("Resist flame", "Ability to resist flame damage", "Resilience", "Resistance")
        self.resist_shadow = ResistShadow("Resist shadow", "Ability to resist shadow damage", "Resilience", "Resistance")
        self.resist_holy = ResistHoly("Resist holy", "Ability to resist holy damage", "Resilience", "Resistance")
        self.resist_poison = ResistPoison("Resist poison", "Ability to resist poison damage", "Resilience", "Resistance")
        self.resist_blunt = ResistBlunt("Resist blunt", "Ability to resist blunt damage", "Resilience", "Resistance")
        self.resist_slashing = ResistSlashing("Resist slashing", "Ability to resist slashing damage", "Resilience", "Resistance")
        self.resist_piercing = ResistPiercing("Resist piercing", "Ability to resist piercing damage", "Resilience", "Resistance")
        

    def items(self):
        """Returns a list of 2-tuples

        Basically a dict.items() clone that looks like ([(key, value), (key, value), ...])
        """
        return ((key, getattr(self, key)) for key in ALL_PROFICIENCIES)
        
        
    def __iter__(self):
        return (getattr(self, key) for key in ALL_PROFICIENCIES)

        
class Proficiency(Base):
    """Proficiency class that stores data about a hero object.
    """
    __tablename__ = "proficiency"
    
    id = Column(Integer, primary_key=True)

    name = Column(String)
    description = Column(String)
    tooltip = Column(String)
    attribute_type = Column(String)
    type = Column(String)
    level = Column(Integer)
    next_value = Column(Integer)
    is_not_max_level = Column(Boolean)
    
    _class = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Proficiency",
        'polymorphic_on':_class
    }

    def __init__(self, name, description, attribute_type, type):
        self.name = name
        self.description = description
        self.attribute_type = attribute_type
        self.type = type
        self.tooltip = ""
        
        self.level = 1
        self.is_not_max_level = False
        
    def is_max_level(self, hero):
        """Return whether proficiency is max level.
        
        Should be able to get hero internally but the 
        relationships may be messed up.
        
        Replaces:
            is_not_max_level attribute.
        """
        return self.level >= getattr(hero.attributes, self.attribute_type.lower()).level // 2
        
    def level_up(self):
        self.level += 1


class Health(Proficiency):
    __tablename__ = "health"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Health",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough vitality"
        self.formatted_name = "health" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Health's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.vitality.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(5*self.level + 0)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_health(self, key_name, current):
        #Update health percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Sanctity(Proficiency):
    __tablename__ = "sanctity"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Sanctity",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough divinity"
        self.formatted_name = "sanctity" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Sanctity's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.divinity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(1.5*self.level + -1)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_sanctity(self, key_name, current):
        #Update sanctity percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Storage(Proficiency):
    __tablename__ = "storage"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Storage",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough strength"
        self.formatted_name = "storage" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Storage's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(2.5*self.level + 8)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_storage(self, key_name, current):
        #Update storage percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Endurance(Proficiency):
    __tablename__ = "endurance"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Endurance",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough fortitude"
        self.formatted_name = "endurance" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Endurance's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.fortitude.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(0.25*self.level + 5)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_endurance(self, key_name, current):
        #Update endurance percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class AttackDamage(Proficiency):
    __tablename__ = "attack_damage"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    minimum = Column(Integer)
    maximum = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"AttackDamage",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.minimum = 0
        self.maximum = 0
        
        self.error = "You do not have enough strength"
        self.formatted_name = "attack_damage" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update AttackDamage's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.minimum = floor(floor(3 * (0.5*sin(0.1*self.level) + 0.1*self.level)) + 0)
        # This creates a tooltip for each variable
        tooltips.append("Minimum: " + str(self.minimum)) 
        self.maximum = floor(floor(3 * (0.5*sin(0.1*self.level) + 0.2*self.level)) + 1)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class AttackSpeed(Proficiency):
    __tablename__ = "attack_speed"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    speed = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"AttackSpeed",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.speed = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "attack_speed" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update AttackSpeed's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.speed = round((3 * (0.1*sin(0.7*self.level) + 0.1*self.level)) + 1, 2)
        # This creates a tooltip for each variable
        tooltips.append("Speed: " + str(self.speed)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class AttackAccuracy(Proficiency):
    __tablename__ = "attack_accuracy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    accuracy = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"AttackAccuracy",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.accuracy = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "attack_accuracy" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update AttackAccuracy's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.accuracy = floor((- (10*5)/((2 * self.level) + 10) + 5) * 7.9 + 5)
        # This creates a tooltip for each variable
        tooltips.append("Accuracy: " + str(self.accuracy)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class FirstStrike(Proficiency):
    __tablename__ = "first_strike"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"FirstStrike",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "first_strike" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update FirstStrike's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*50)/((0.5 * self.level) + 5) + 50) * 7.9 + -30)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class CriticalHit(Proficiency):
    __tablename__ = "critical_hit"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"CriticalHit",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.modifier = 0
        
        self.error = "You do not have enough perception"
        self.formatted_name = "critical_hit" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update CriticalHit's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.perception.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*50)/((0.3 * self.level) + 5) + 50) * 7.9 + -22)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        self.modifier = floor((- (1*0.5)/((0.5 * self.level) + 1) + 0.5) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Defence(Proficiency):
    __tablename__ = "defence"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Defence",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough fortitude"
        self.formatted_name = "defence" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Defence's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.fortitude.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (7*35)/((0.1 * self.level) + 7) + 35) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Evade(Proficiency):
    __tablename__ = "evade"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Evade",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough reflexes"
        self.formatted_name = "evade" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Evade's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.reflexes.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (10*15)/((0.1 * self.level) + 10) + 15) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Parry(Proficiency):
    __tablename__ = "parry"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Parry",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough reflexes"
        self.formatted_name = "parry" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Parry's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.reflexes.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (15*15)/((0.2 * self.level) + 15) + 15) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Riposte(Proficiency):
    __tablename__ = "riposte"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Riposte",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "riposte" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Riposte's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (20*15)/((0.3 * self.level) + 20) + 15) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Fatigue(Proficiency):
    __tablename__ = "fatigue"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    current = Column(Integer)
    
    percent = Column(Integer)
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Fatigue",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.current = 0
        self.percent = 0
        self.error = "You do not have enough fortitude"
        self.formatted_name = "fatigue" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Fatigue's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.fortitude.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = floor(2*self.level + -1)
        # This creates a tooltip for each variable
        tooltips.append("Maximum: " + str(self.maximum)) 
        self.current = self.maximum
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    @validates('current')
    def validate_fatigue(self, key_name, current):
        #Update fatigue percent on health change.
        try:
            self.percent = round(current / self.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.percent = 0
        return max(current or 0, 0)
    

class Block(Proficiency):
    __tablename__ = "block"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Block",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.modifier = 0
        
        self.error = "You do not have enough strength"
        self.formatted_name = "block" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Block's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (25*60)/((0.25 * self.level) + 25) + 60) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        self.modifier = floor((- (20*100)/((1.5 * self.level) + 20) + 100) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Stealth(Proficiency):
    __tablename__ = "stealth"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Stealth",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough perception"
        self.formatted_name = "stealth" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Stealth's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.perception.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (20*65)/((0.5 * self.level) + 20) + 65) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Pickpocketing(Proficiency):
    __tablename__ = "pickpocketing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Pickpocketing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough agility"
        self.formatted_name = "pickpocketing" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Pickpocketing's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (15*70)/((0.6 * self.level) + 15) + 70) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Faith(Proficiency):
    __tablename__ = "faith"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Faith",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough divinity"
        self.formatted_name = "faith" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Faith's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.divinity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (10*5)/((2 * self.level) + 10) + 5) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Bartering(Proficiency):
    __tablename__ = "bartering"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Bartering",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough charisma"
        self.formatted_name = "bartering" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Bartering's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.charisma.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (20*60)/((0.5 * self.level) + 20) + 60) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Oration(Proficiency):
    __tablename__ = "oration"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Oration",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough strength"
        self.formatted_name = "oration" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Oration's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (15*60)/((0.75 * self.level) + 15) + 60) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Knowledge(Proficiency):
    __tablename__ = "knowledge"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Knowledge",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough wisdom"
        self.formatted_name = "knowledge" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Knowledge's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.wisdom.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (5*50)/((0.1 * self.level) + 5) + 50) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Literacy(Proficiency):
    __tablename__ = "literacy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Literacy",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough wisdom"
        self.formatted_name = "literacy" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Literacy's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.wisdom.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (10*75)/((0.25 * self.level) + 10) + 75) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class Luck(Proficiency):
    __tablename__ = "luck"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Luck",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        
        self.error = "You do not have enough fortuity"
        self.formatted_name = "luck" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update Luck's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.fortuity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + 0)
        # This creates a tooltip for each variable
        tooltips.append("Chance: " + str(self.chance)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistFrost(Proficiency):
    __tablename__ = "resist_frost"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistFrost",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_frost" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistFrost's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistFlame(Proficiency):
    __tablename__ = "resist_flame"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistFlame",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_flame" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistFlame's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistShadow(Proficiency):
    __tablename__ = "resist_shadow"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistShadow",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_shadow" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistShadow's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistHoly(Proficiency):
    __tablename__ = "resist_holy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistHoly",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_holy" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistHoly's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistPoison(Proficiency):
    __tablename__ = "resist_poison"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistPoison",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_poison" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistPoison's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistBlunt(Proficiency):
    __tablename__ = "resist_blunt"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistBlunt",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_blunt" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistBlunt's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistSlashing(Proficiency):
    __tablename__ = "resist_slashing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistSlashing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_slashing" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistSlashing's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    

class ResistPiercing(Proficiency):
    __tablename__ = "resist_piercing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistPiercing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_piercing" # (Elthran) I needed to add this to get the COMMAND code to work. Hopefully (Haldon) can improve this.
        
    def update(self, myHero):
        """Update ResistPiercing's attributes and tooltip variable.
        """
        tooltips = []
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        # This creates a tooltip for each variable
        tooltips.append("Modifier: " + str(self.modifier)) 
        #This updates the main tooltip string variable.
        self.tooltip = ';'.join(tooltips) 

    
    




    """

    @validates('endurance')
    def sync_endurance_percent(self, key_name, endurance_value):
        #Update endurance_percent on endurance change.

        try:
            self.endurance_percent = round(endurance_value / self.proficiencies.endurance.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.endurance_percent = 0

        return max(endurance_value, 0)

    @validates('sanctity')
    def sync_sanctity_percent(self, key_name, sanctity_value):
        #Update sanctity_percent on sanctity change.

        try:
            self.sanctity_percent = round(sanctity_value / self.proficiencies.sanctity.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.sanctity_percent = 0

        return max(sanctity_value, 0)

    @validates('experience')
    def sync_experience_percent(self, key_name, xp_value):
        #Update exp_percent on current_exp change.

        #String conversion occurs in HTML and add the percent sign is added there to.
        #key_name is "current_exp" .. not actually used here at this time but it is sent to
        #this function so it must be accepted.

        try:
            self.experience_percent = round(xp_value / self.experience_maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.experience_percent = 0
        return xp_value

    @validates('health')
    def sync_health_percent(self, key_name, health_value):
        #Update health_percent on health change.

        try:
            self.health_percent = round(health_value / self.proficiencies.health.maximum, 2) * 100
        except (TypeError, ZeroDivisionError):
            self.health_percent = 0

        return max(health_value or 0, 0)
    """

    
    def __iter__(self):
        pass # I don't know what to put here yet but it will be used later on.