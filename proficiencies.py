"""
This file is generated by 'build_code.py'.
It has been set to read only so that you don't edit it without using
'build_code.py'. Thought that may change in the future.
"""

from sqlalchemy import Column, Integer, String, Boolean, Float
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship
from flask import render_template_string

from factories import TemplateMixin
from base_classes import Base

# For testing
from pprint import pprint
import pdb


ALL_PROFICIENCIES = [('Accuracy', 'How accurately you attack. This gives a bonus chance to successfully striking your opponent in combat.', 'Agility', 'linear', 0, 1.0, 0, False, True), ('Adventuring', 'Your skill at exploring new places. This increases your likelihood of finding items when exploring', 'Fortuity', 'linear', 0, 5.0, 0, False, True), ('Bartering', 'Your skill at negotiating prices. It reduces the price you pay when buying any item from a vendor.', 'Charisma', 'linear', 0, 2.0, 0, False, True), ('Block', 'Skill with a shield. If a shield is equipped then the amount of damage blocked is increased.', 'Resilience', 'linear', 0, 2.0, 0, False, True), ('Charm', 'How likeable you are. It increases the speed of how quickly people begin to trust you.', 'Charisma', 'linear', 0, 5.0, 0, False, True), ('Conviction', 'How quickly you are able to gain the devotion of a god.', 'None', 'linear', 0, 2.0, 0, False, True), ('Courage', 'How capable you are of overcoming your fears. The greater your courage then the greater the obstacles you will be capable of facing.', 'Willpower', 'linear', 0, 1.0, 0, False, False), ('Damage', 'Your capability of inflicting damage through melee. This is added to your combat skill and determines the greatest posssible damage you can deal in a single blow.', 'Brawn', 'linear', 1, 2.0, 0, False, False), ('Combat', 'Your proficiency in fighting. The greater combat proficiency you have then the more damage you do on each attack.', 'Brawn', 'linear', 1, 1.0, 0, False, False), ('Defence', 'Your ability to take physical damage. This combines with your armour to reduce all physical damaged received.', 'Resilience', 'linear', 0, 1.0, 0, False, True), ('Detection', 'Determines the chance that you will uncover enemy traps and ambushes.', 'Survivalism', 'linear', 0, 3.0, 0, False, True), ('Encumbrance', 'Your ability to fight in combat while carrying cumbersome gear.', 'Brawn', 'linear', 0, 5.0, 0, False, True), ('Endurance', 'Number of actions you can perform each day.', 'Resilience', 'linear', 5, 0.5, 0, False, False), ('Evade', 'Your ability to dodge enemy attacks. Gives a bonus chance for enemies to miss their close combat attacks.', 'Quickness', 'linear', 0, 2.0, 0, False, True), ('Explorer', 'Reveals additional optional tasks which can be performed while exploring.', 'Survivalism', 'linear', 0, 1.0, 0, False, False), ('Faith', 'Adds a bonus to how effective your spells are.', 'Divinity', 'linear', 0, 5.0, 0, False, True), ('Fatigue', 'Reduces the speed at which you become exhausted in combat.', 'Resilience', 'linear', 0, 5.0, 0, False, False), ('First strike', 'Increases the likelihood that you will attack first in combat.', 'Quickness', 'linear', 0, 3.5, 1, False, False), ('Flee', 'Increases the chance that you can successful escape from a battle.', 'Quickness', 'linear', 0, 10.0, 0, False, False), ('Health', 'Determines the number of health points you have. When your health reahes zero then you fall unconscious.', 'Vitality', 'linear', 5, 1.0, 0, False, False), ('Huntsman', 'The amount of information that you can learn from defeated enemies.', 'Survivalism', 'linear', 0, 1.0, 0, False, False), ('Killshot', 'Damage multiplier added when performing a critical hit.', 'Agility', 'linear', 1, 10.0, 0, False, True), ('Knowledge', 'UNUSED', 'Intellect', 'linear', 0, 0.0, 0, False, False), ('Literacy', 'UNUSED', 'Intellect', 'linear', 0, 0.0, 0, False, False), ('Logistics', 'UNUSED', 'Pathfinding', 'linear', 0, 0.0, 0, False, False), ('Luck', 'A bonus chance of having incredibly good luck.', 'Fortuity', 'linear', 0, 1.0, 0, False, True), ('Mountaineering', 'UNUSED', 'Pathfinding', 'linear', 0, 0.0, 0, False, False), ('Navigator', 'UNUSED', 'Pathfinding', 'linear', 0, 0.0, 0, False, False), ('Oration', 'UNUSED', 'Charisma', 'linear', 0, 0.0, 0, False, False), ('Parry', 'The likelihood that you can parry an incoming attack.', 'Quickness', 'linear', 0, 2.0, 0, False, True), ('Pickpocketing', 'Increases the chance that you will successfully pickpocket someone.', 'Agility', 'linear', 0, 5.0, 0, False, True), ('Precision', 'Chance to critically hit enemies. A critical hit always hits for maximum damage and then applies your killshot multiplier to that value.', 'Agility', 'linear', 0, 1.0, 0, False, True), ('Recovery', 'How quickly you recover from poisons and the negative effects of different ailments.', 'Vitality', 'linear', 0, 10.0, 0, False, True), ('Redemption', 'For each two levels of redemption you recover one sanctity each day.', 'Divinity', 'linear', 0, 0.5, 0, False, False), ('Regeneration', 'For each two levels of regeneration you recover one additional health each day.', 'Vitality', 'linear', 1, 0.5, 0, False, False), ('Reputation', 'The magnitutde of which your actions affect your renown.', 'Charisma', 'linear', 0, 5.0, 0, False, True), ('Resist blunt', 'Ability to resist blunt damage', 'Resilience', 'linear', 0, 3.0, 0, False, True), ('Resist flame', 'Ability to resist flame damage', 'Resilience', 'linear', 0, 3.0, 0, False, True), ('Resist frost', 'Ability to resist frost damage', 'Resilience', 'linear', 0, 3.0, 0, False, True), ('Resist holy', 'Ability to resist holy damage', 'Divinity', 'linear', 0, 3.0, 0, False, True), ('Resist piercing', 'Ability to resist piercing damage', 'Resilience', 'linear', 0, 3.0, 0, False, True), ('Resist poison', 'Ability to resist poison damage', 'Resilience', 'linear', 0, 3.0, 0, False, True), ('Resist shadow', 'Ability to resist shadow damage', 'Resilience', 'linear', 0, 3.0, 0, False, True), ('Resist slashing', 'Ability to resist slashing damage', 'Resilience', 'linear', 0, 3.0, 0, False, True), ('Riposte', 'UNUSED', 'Agility', 'linear', 0, 0.0, 0, False, False), ('Sanctity', 'Amount of sanctity you can have.', 'Divinity', 'linear', 0, 1.0, 0, False, False), ('Sanity', 'Your ability to resist mind altering affects.', 'Willpower', 'linear', 0, 3.0, 0, False, True), ('Speed', 'How quickly you can attack in combat.', 'Quickness', 'linear', 1, 0.05, 2, False, False), ('Stamina', 'For each four levels of stamina you recover one additional endurance each day.', 'Resilience', 'linear', 1, 0.25, 0, False, False), ('Stealth', 'Chance to avoid detection when attempting to stay concealed.', 'Agility', 'linear', 0, 2.0, 0, False, True), ('Storage', 'The amount of weight that you can carry.', 'Brawn', 'linear', 10, 3.0, 0, False, False), ('Survivalist', 'UNUSED', 'Survivalism', 'linear', 0, 0.0, 0, False, False), ('Trustworthiness', 'UNUSED', 'Charisma', 'linear', 0, 0.0, 0, False, False), ('Understanding', 'How much more quickly you level up.', 'Intellect', 'linear', 0, 1.0, 0, False, True), ('CautionLevel', 'How much detail is revealed of a location before you visit it.', 'None', 'linear', 0, 0.0, 0, True, False), ('ClimbingAbility', 'The higher your climbing skill then the more difficult mountains you may climb.', 'None', 'linear', 0, 0.0, 0, True, False), ('SpellLimit', 'How many spells you may know.', 'None', 'linear', 0, 0.0, 0, True, False), ('Vision', 'How much of the map is revealed.', 'None', 'linear', 0, 0.0, 0, True, False), ('Woodsman', 'Modifier for forest movement.', 'Pathfinding', 'linear', 1, 1.0, 0, True, False), ('BlockAmount', 'Amount of damage absorbed when a shield successfully blocks', 'None', 'linear', 0, 0.0, 0, True, True), ('Blunt', 'Skill with blunt weapons', 'None', 'linear', 0, 0.0, 0, True, True), ('Piercing', 'Skill with piercing weapons', 'None', 'linear', 0, 0.0, 0, True, True), ('Slashing', 'Skill with slashing weapons', 'None', 'linear', 0, 0.0, 0, True, True), ('WeaponAffinity', 'How accustomed to your current weapon you are', 'None', 'linear', 0, 0.0, 0, True, True)]

ALL_NAMES = ['Accuracy', 'Adventuring', 'Bartering', 'Block', 'Block amount', 'Blunt', 'Caution level', 'Charm', 'Climbing ability', 'Combat', 'Conviction', 'Courage', 'Damage', 'Defence', 'Detection', 'Encumbrance', 'Endurance', 'Evade', 'Explorer', 'Faith', 'Fatigue', 'First strike', 'Flee', 'Health', 'Huntsman', 'Killshot', 'Knowledge', 'Literacy', 'Logistics', 'Luck', 'Mountaineering', 'Navigator', 'Oration', 'Parry', 'Pickpocketing', 'Piercing', 'Precision', 'Recovery', 'Redemption', 'Regeneration', 'Reputation', 'Resist blunt', 'Resist flame', 'Resist frost', 'Resist holy', 'Resist piercing', 'Resist poison', 'Resist shadow', 'Resist slashing', 'Riposte', 'Sanctity', 'Sanity', 'Slashing', 'Speed', 'Spell limit', 'Stamina', 'Stealth', 'Storage', 'Survivalist', 'Trustworthiness', 'Understanding', 'Vision', 'Weapon affinity', 'Woodsman']
ALL_ATTRIBUTE_NAMES = ['accuracy', 'adventuring', 'bartering', 'block', 'block_amount', 'blunt', 'caution_level', 'charm', 'climbing_ability', 'combat', 'conviction', 'courage', 'damage', 'defence', 'detection', 'encumbrance', 'endurance', 'evade', 'explorer', 'faith', 'fatigue', 'first_strike', 'flee', 'health', 'huntsman', 'killshot', 'knowledge', 'literacy', 'logistics', 'luck', 'mountaineering', 'navigator', 'oration', 'parry', 'pickpocketing', 'piercing', 'precision', 'recovery', 'redemption', 'regeneration', 'reputation', 'resist_blunt', 'resist_flame', 'resist_frost', 'resist_holy', 'resist_piercing', 'resist_poison', 'resist_shadow', 'resist_slashing', 'riposte', 'sanctity', 'sanity', 'slashing', 'speed', 'spell_limit', 'stamina', 'stealth', 'storage', 'survivalist', 'trustworthiness', 'understanding', 'vision', 'weapon_affinity', 'woodsman']
ALL_CLASS_NAMES = ['Accuracy', 'Adventuring', 'Bartering', 'Block', 'BlockAmount', 'Blunt', 'CautionLevel', 'Charm', 'ClimbingAbility', 'Combat', 'Conviction', 'Courage', 'Damage', 'Defence', 'Detection', 'Encumbrance', 'Endurance', 'Evade', 'Explorer', 'Faith', 'Fatigue', 'FirstStrike', 'Flee', 'Health', 'Huntsman', 'Killshot', 'Knowledge', 'Literacy', 'Logistics', 'Luck', 'Mountaineering', 'Navigator', 'Oration', 'Parry', 'Pickpocketing', 'Piercing', 'Precision', 'Recovery', 'Redemption', 'Regeneration', 'Reputation', 'ResistBlunt', 'ResistFlame', 'ResistFrost', 'ResistHoly', 'ResistPiercing', 'ResistPoison', 'ResistShadow', 'ResistSlashing', 'Riposte', 'Sanctity', 'Sanity', 'Slashing', 'Speed', 'SpellLimit', 'Stamina', 'Stealth', 'Storage', 'Survivalist', 'Trustworthiness', 'Understanding', 'Vision', 'WeaponAffinity', 'Woodsman']


class Proficiency(TemplateMixin, Base):
    """Proficiency class that stores data about a hero object.
    """
    __tablename__ = "proficiency"
    
    id = Column(Integer, primary_key=True)

    # Relationships
    # Hero to Proficiencies is One to many?
    hero_id = Column(Integer, ForeignKey('hero.id', ondelete="CASCADE"))
    hero = relationship("Hero", back_populates="base_proficiencies")

    # Proficiency to Ability is One to Many
    ability_id = Column(Integer, ForeignKey('ability.id', ondelete="CASCADE"))
    ability = relationship("Ability", back_populates="proficiencies")

    # Proficiency to Item is One to Many
    item_id = Column(Integer, ForeignKey('item.id', ondelete="CASCADE"))
    items = relationship("Item", back_populates="proficiencies")

    # Main colums
    level = Column(Integer)
    base = Column(Integer)
    modifier = Column(Float)

    type_ = Column(String(50))
    attribute_type = Column(String(50))
    description = Column(String(200))
    # tooltip = Column(String(50))
    reason_for_zero = Column(String(50))    # Maybe remove
    current = Column(Integer)
    hidden = Column(Boolean)
    error = Column(String(50))

    # In child classes this allows different levels of rounding.
    num_of_decimals = 0
    # In the child classes this allows nice output formatting
    format_spec = '{:.2f}'
    name = "proficiency"

    __mapper_args__ = {
        'polymorphic_identity': "Proficiency",
        'polymorphic_on': type_
    }

    def __init__(self, level=0, base=0, modifier=0, template=False):
        self.type_ = self.__class__.__name__
        # self.tooltip = ""
        self.level = level
        self.base = base
        self.modifier = modifier
        self.template = template
        self.current = self.final

    def clone(self):
        if not self.template:
            raise Exception("Only use this method if obj.template == True.")
        return self.__class__(level=self.level, base=self.base,
                              modifier=self.modifier, template=False)

    def level_up(self):
        self.level += 1
        self.current = self.hero.get_summed_proficiencies(self.name).final

    def scale_by_level(self, level=None):
        """Return some function of the level attribute.

        This is different for each proficiency.
        Options are:

        "root:
        return round((100 * self.level)**0.5 - (self.level / 4), precision)
        "linear"
        return round(value1 * self.level, precision)
        "empty"
        return self.level  # Defaults to 0

        NOTE: base value has now been moved to the final function
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level
        return level

    @property
    def next_value(self):
        """Return the value this proficiency will have if it is updated."""
        return round((self.scale_by_level(level=self.level+1) + self.base) *
                     ((self.modifier + 100) / 100), self.num_of_decimals)

    @property
    def final(self):
        """Return the scaled value + base + modifier percent."""
        return round((self.scale_by_level() + self.base) *
                     ((self.modifier + 100) / 100), self.num_of_decimals)

    @property
    def percent(self):
        """Return the percent of the current to the final value."""
        try:
            return round(self.current / self.final, 2) * 100
        except ZeroDivisionError:
            return 0

    @property
    def tooltip(self):
        """Create a tooltip for each variable.

        Modifies the final and next_value with the Class's format spec.
        """

        temp = """<h1>{{ prof.display_name }} (Level {{ prof.level }})</h1>
                  <h2>{{ prof.description }}</h2>
                  <h2>Current value: {{ formatted_final }}</h2>
                  {% if not prof.is_max_level and prof.hero.proficiency_points %}
                  <h2>Next value: <font color="green">{{ formatted_next }}</font></h2>
                  <button id=levelUpProficiencyButton class="upgradeButton" onclick="sendToPy(event, proficiencyTooltip, 'update_proficiency', {'id': {{ prof.id }}});"></button>
                  {% elif prof.is_max_level %}<font color="red">Not enough {{ prof.attribute_type }}</font>{% endif %}</h2>"""
        return render_template_string(
            temp, prof=self,
            formatted_final=self.format_spec.format(self.final),
            formatted_next=self.format_spec.format(self.next_value))

    @property
    def attribute(self):
        return None

    @property
    def max_level(self):
        return self.attribute.level * 2

    @property
    def is_max_level(self):
        """Cap the proficiency level at double the attribute level."""
        return True if self.level >= self.attribute.level * 2 else False


class Accuracy(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "accuracy"
    display_name = "Accuracy"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Accuracy"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.agility

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How accurately you attack. This gives a bonus chance to successfully striking your opponent in combat."
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Accuracy's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Adventuring(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "adventuring"
    display_name = "Adventuring"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Adventuring"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.fortuity

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your skill at exploring new places. This increases your likelihood of finding items when exploring"
        self.attribute_type = "Fortuity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Adventuring's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(5.0 * level, self.num_of_decimals)


class Bartering(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "bartering"
    display_name = "Bartering"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Bartering"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.charisma

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your skill at negotiating prices. It reduces the price you pay when buying any item from a vendor."
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Bartering's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(2.0 * level, self.num_of_decimals)


class Block(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "block"
    display_name = "Block"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Block"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Skill with a shield. If a shield is equipped then the amount of damage blocked is increased."
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Block's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(2.0 * level, self.num_of_decimals)

    def check_shield(self, hero):
        if hero.inventory.left_hand is None or hero.inventory.left_hand.type != "Shield":
            self.current = 0
            self.reason_for_zero = "You must have a shield equipped"
        else:
            self.reason_for_zero = ""


class Charm(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "charm"
    display_name = "Charm"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Charm"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.charisma

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How likeable you are. It increases the speed of how quickly people begin to trust you."
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Charm's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(5.0 * level, self.num_of_decimals)


class Conviction(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "conviction"
    display_name = "Conviction"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Conviction"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How quickly you are able to gain the devotion of a god."
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Conviction's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(2.0 * level, self.num_of_decimals)


class Courage(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "courage"
    display_name = "Courage"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Courage"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.willpower

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How capable you are of overcoming your fears. The greater your courage then the greater the obstacles you will be capable of facing."
        self.attribute_type = "Willpower"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Courage's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Damage(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "damage"
    display_name = "Damage"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Damage"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.brawn

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your capability of inflicting damage through melee. This is added to your combat skill and determines the greatest posssible damage you can deal in a single blow."
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Damage's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(2.0 * level, self.num_of_decimals)


class Combat(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "combat"
    display_name = "Combat"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Combat"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.brawn

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your proficiency in fighting. The greater combat proficiency you have then the more damage you do on each attack."
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Combat's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Defence(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "defence"
    display_name = "Defence"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Defence"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your ability to take physical damage. This combines with your armour to reduce all physical damaged received."
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Defence's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Detection(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "detection"
    display_name = "Detection"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Detection"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.survivalism

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Determines the chance that you will uncover enemy traps and ambushes."
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Detection's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class Encumbrance(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "encumbrance"
    display_name = "Encumbrance"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Encumbrance"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.brawn

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your ability to fight in combat while carrying cumbersome gear."
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Encumbrance's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(5.0 * level, self.num_of_decimals)


class Endurance(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "endurance"
    display_name = "Endurance"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Endurance"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=5, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Number of actions you can perform each day."
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Endurance's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.5 * level, self.num_of_decimals)


class Evade(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "evade"
    display_name = "Evade"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Evade"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.quickness

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your ability to dodge enemy attacks. Gives a bonus chance for enemies to miss their close combat attacks."
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Evade's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(2.0 * level, self.num_of_decimals)


class Explorer(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "explorer"
    display_name = "Explorer"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Explorer"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.survivalism

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Reveals additional optional tasks which can be performed while exploring."
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Explorer's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Faith(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "faith"
    display_name = "Faith"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Faith"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.divinity

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Adds a bonus to how effective your spells are."
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Faith's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(5.0 * level, self.num_of_decimals)


class Fatigue(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "fatigue"
    display_name = "Fatigue"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Fatigue"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Reduces the speed at which you become exhausted in combat."
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Fatigue's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(5.0 * level, self.num_of_decimals)


class FirstStrike(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "first_strike"
    display_name = "First Strike"
    num_of_decimals = 1
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.1f}"

    __mapper_args__ = {
        'polymorphic_identity': "FirstStrike"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.quickness

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Increases the likelihood that you will attack first in combat."
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update FirstStrike's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.5 * level, self.num_of_decimals)


class Flee(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "flee"
    display_name = "Flee"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Flee"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.quickness

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Increases the chance that you can successful escape from a battle."
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Flee's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(10.0 * level, self.num_of_decimals)


class Health(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "health"
    display_name = "Health"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Health"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.vitality

    def __init__(self, *args, base=5, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Determines the number of health points you have. When your health reahes zero then you fall unconscious."
        self.attribute_type = "Vitality"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Health's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Huntsman(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "huntsman"
    display_name = "Huntsman"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Huntsman"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.survivalism

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "The amount of information that you can learn from defeated enemies."
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Huntsman's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Killshot(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "killshot"
    display_name = "Killshot"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Killshot"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.agility

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Damage multiplier added when performing a critical hit."
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Killshot's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(10.0 * level, self.num_of_decimals)


class Knowledge(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "knowledge"
    display_name = "Knowledge"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Knowledge"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.intellect

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "UNUSED"
        self.attribute_type = "Intellect"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Knowledge's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Literacy(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "literacy"
    display_name = "Literacy"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Literacy"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.intellect

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "UNUSED"
        self.attribute_type = "Intellect"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Literacy's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Logistics(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "logistics"
    display_name = "Logistics"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Logistics"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.pathfinding

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "UNUSED"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Logistics's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Luck(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "luck"
    display_name = "Luck"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Luck"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.fortuity

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "A bonus chance of having incredibly good luck."
        self.attribute_type = "Fortuity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Luck's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Mountaineering(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "mountaineering"
    display_name = "Mountaineering"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Mountaineering"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.pathfinding

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "UNUSED"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Mountaineering's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Navigator(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "navigator"
    display_name = "Navigator"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Navigator"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.pathfinding

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "UNUSED"
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Navigator's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Oration(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "oration"
    display_name = "Oration"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Oration"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.charisma

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "UNUSED"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Oration's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Parry(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "parry"
    display_name = "Parry"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Parry"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.quickness

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "The likelihood that you can parry an incoming attack."
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Parry's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(2.0 * level, self.num_of_decimals)


class Pickpocketing(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "pickpocketing"
    display_name = "Pickpocketing"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Pickpocketing"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.agility

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Increases the chance that you will successfully pickpocket someone."
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Pickpocketing's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(5.0 * level, self.num_of_decimals)


class Precision(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "precision"
    display_name = "Precision"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Precision"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.agility

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to critically hit enemies. A critical hit always hits for maximum damage and then applies your killshot multiplier to that value."
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Precision's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Recovery(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "recovery"
    display_name = "Recovery"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Recovery"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.vitality

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How quickly you recover from poisons and the negative effects of different ailments."
        self.attribute_type = "Vitality"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Recovery's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(10.0 * level, self.num_of_decimals)


class Redemption(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "redemption"
    display_name = "Redemption"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Redemption"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.divinity

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "For each two levels of redemption you recover one sanctity each day."
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Redemption's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.5 * level, self.num_of_decimals)


class Regeneration(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "regeneration"
    display_name = "Regeneration"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Regeneration"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.vitality

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "For each two levels of regeneration you recover one additional health each day."
        self.attribute_type = "Vitality"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Regeneration's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.5 * level, self.num_of_decimals)


class Reputation(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "reputation"
    display_name = "Reputation"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Reputation"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.charisma

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "The magnitutde of which your actions affect your renown."
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Reputation's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(5.0 * level, self.num_of_decimals)


class ResistBlunt(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "resist_blunt"
    display_name = "Resist Blunt"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "ResistBlunt"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist blunt damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update ResistBlunt's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class ResistFlame(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "resist_flame"
    display_name = "Resist Flame"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "ResistFlame"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist flame damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update ResistFlame's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class ResistFrost(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "resist_frost"
    display_name = "Resist Frost"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "ResistFrost"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist frost damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update ResistFrost's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class ResistHoly(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "resist_holy"
    display_name = "Resist Holy"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "ResistHoly"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.divinity

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist holy damage"
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update ResistHoly's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class ResistPiercing(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "resist_piercing"
    display_name = "Resist Piercing"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "ResistPiercing"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist piercing damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update ResistPiercing's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class ResistPoison(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "resist_poison"
    display_name = "Resist Poison"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "ResistPoison"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist poison damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update ResistPoison's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class ResistShadow(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "resist_shadow"
    display_name = "Resist Shadow"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "ResistShadow"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist shadow damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update ResistShadow's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class ResistSlashing(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "resist_slashing"
    display_name = "Resist Slashing"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "ResistSlashing"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Ability to resist slashing damage"
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update ResistSlashing's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class Riposte(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "riposte"
    display_name = "Riposte"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Riposte"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.agility

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "UNUSED"
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Riposte's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Sanctity(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "sanctity"
    display_name = "Sanctity"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Sanctity"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.divinity

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Amount of sanctity you can have."
        self.attribute_type = "Divinity"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Sanctity's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class Sanity(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "sanity"
    display_name = "Sanity"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Sanity"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.willpower

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Your ability to resist mind altering affects."
        self.attribute_type = "Willpower"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Sanity's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class Speed(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "speed"
    display_name = "Speed"
    num_of_decimals = 2
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.2f}"

    __mapper_args__ = {
        'polymorphic_identity': "Speed"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.quickness

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How quickly you can attack in combat."
        self.attribute_type = "Quickness"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Speed's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.05 * level, self.num_of_decimals)


class Stamina(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "stamina"
    display_name = "Stamina"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Stamina"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.resilience

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "For each four levels of stamina you recover one additional endurance each day."
        self.attribute_type = "Resilience"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Stamina's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.25 * level, self.num_of_decimals)


class Stealth(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "stealth"
    display_name = "Stealth"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Stealth"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.agility

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Chance to avoid detection when attempting to stay concealed."
        self.attribute_type = "Agility"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Stealth's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(2.0 * level, self.num_of_decimals)


class Storage(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "storage"
    display_name = "Storage"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Storage"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.brawn

    def __init__(self, *args, base=10, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "The amount of weight that you can carry."
        self.attribute_type = "Brawn"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Storage's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(3.0 * level, self.num_of_decimals)


class Survivalist(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "survivalist"
    display_name = "Survivalist"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Survivalist"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.survivalism

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "UNUSED"
        self.attribute_type = "Survivalism"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Survivalist's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Trustworthiness(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "trustworthiness"
    display_name = "Trustworthiness"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Trustworthiness"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.charisma

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "UNUSED"
        self.attribute_type = "Charisma"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Trustworthiness's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Understanding(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = False
    name = "understanding"
    display_name = "Understanding"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Understanding"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.intellect

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How much more quickly you level up."
        self.attribute_type = "Intellect"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Understanding's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class CautionLevel(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "caution_level"
    display_name = "Cautionlevel"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "CautionLevel"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How much detail is revealed of a location before you visit it."
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update CautionLevel's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class ClimbingAbility(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "climbing_ability"
    display_name = "Climbingability"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "ClimbingAbility"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "The higher your climbing skill then the more difficult mountains you may climb."
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update ClimbingAbility's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class SpellLimit(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "spell_limit"
    display_name = "Spelllimit"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "SpellLimit"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How many spells you may know."
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update SpellLimit's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Vision(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "vision"
    display_name = "Vision"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Vision"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How much of the map is revealed."
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Vision's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Woodsman(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "woodsman"
    display_name = "Woodsman"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = False  # Should be False but I'm getting an error
    format_spec = "{:.0f}"

    __mapper_args__ = {
        'polymorphic_identity': "Woodsman"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.pathfinding

    def __init__(self, *args, base=1, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Modifier for forest movement."
        self.attribute_type = "Pathfinding"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Woodsman's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(1.0 * level, self.num_of_decimals)


class BlockAmount(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "block_amount"
    display_name = "Blockamount"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "BlockAmount"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Amount of damage absorbed when a shield successfully blocks"
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update BlockAmount's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Blunt(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "blunt"
    display_name = "Blunt"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Blunt"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Skill with blunt weapons"
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Blunt's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Piercing(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "piercing"
    display_name = "Piercing"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Piercing"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Skill with piercing weapons"
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Piercing's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class Slashing(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "slashing"
    display_name = "Slashing"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "Slashing"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "Skill with slashing weapons"
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update Slashing's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


class WeaponAffinity(Proficiency):
    # If this is true, then the proficiency should not show up on the
    # prof page and should only be modifiable by items/abilities.
    hidden = True
    name = "weapon_affinity"
    display_name = "Weaponaffinity"
    num_of_decimals = 0
    # This should add a "%" to the display at the end of a prof.
    is_percent = True  # Should be True but I'm getting an error
    format_spec = "{:.0f}%"

    __mapper_args__ = {
        'polymorphic_identity': "WeaponAffinity"
    }

    # Proficiency to Attribute is many to one.
    @property
    def attribute(self):
        return self.hero.attributes.none

    def __init__(self, *args, base=0, **kwargs):
        super().__init__(*args, base=base, **kwargs)
        self.description = "How accustomed to your current weapon you are"
        self.attribute_type = "None"
        self.error = "You do not have enough {}".format(self.attribute_type)

    def scale_by_level(self, level=None):
        """Update WeaponAffinity's attributes and tooltip variable.
        """

        # Allows you to determine the value at the next level without
        # modifying self.level (which might have unintended consequences).
        if level is None:
            level = self.level

        return round(0.0 * level, self.num_of_decimals)


'''
Old code that might need to be readded at some point.
@staticmethod
    def keys():
        return [{% for value in prof[3] %}'{{ normalize_attrib_name(value[0]) }}'{% if not loop.last %}, {% endif %}{% endfor %}]

    def items(self):
        """Basically a dict.items() clone that looks like ((key, value),
            (key, value), ...)

        This is an iterator? Maybe it should be a list or a view?
        """
        return ((key, getattr(self, key)) for key in self.keys())

    def __iter__(self):
        """Return all the attributes of this object as an iterator."""
        return (key for key in self.keys())
'''