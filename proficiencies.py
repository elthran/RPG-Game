"""This file is generated by "data/build_code.py"
It has been set to read only so that you don't edit it without using
build_code.py.
"""

from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship

from base_classes import Base

from math import sin
from math import floor

# Name, Description, Attribute_Type, Type, [(Values Name, Value type, (Modifiers of value))]
# Linear: Level multiplier, Base Value
# Curvy: (larger "0" means it reaches the cap quicker) (smaller "1" means it reaxhes the cap quicker) ("2" is the cap or maximum possible value) ("3" is the negative amount)
# Sensitive: Like curvy but has decimals (larger "0" means it reaches the cap quicker) (smaller "1" means it reaxhes the cap quicker) ("2" is the cap or maximum possible value) ("3" is the negative amount)
# Modifier: (larger "a" means greater amplitude), (larger "b" means greater steepness andfaster increase), (greater "c" means greater frequency of waves) 
PROFICIENCY_INFORMATION = [
    ("Health", "How much you can take before you die", "Vitality", "Offense", [("Maximum", "linear", (5, 0))]),
    ("Sanctity", "Casting points", "Divinity", "Offense", [("Maximum", "linear", (1.5, -1))]),
    ("Storage", "Carrying capacity", "Strength", "Offense", [("Maximum", "linear", (2.5, 8))]),
    ("Endurance", "Actions performed each day", "Fortitude", "Offense", [("Maximum", "linear", (0.25, 5))]),
    ("Attack damage", "How hard you hit", "Strength", "Offense", [("Minimum", "curvy", (0.5, 0.1, 0.1, 0)), ("Maximum",  "curvy", (0.5, 0.2, 0.1, 1))]),
    ("Attack speed", "How fast you attack", "Agility", "Offense", [("Speed", "sensitive", (0.1, 0.1, 0.7, 1))]),
    ("Attack accuracy", "Chance to hit", "Agility", "Offense", [("Accuracy", "percent", (2, 10, 5, 5))]),
    ("First strike", "Chance to strike first", "Agility", "Offense", [("Chance", "percent", (0.5, 5, 50, 0))]),
    ("Critical hit", "Ability to hit your enemy's weakspots", "Perception", "Offense", [("Chance", "percent", (0.3, 5, 50, -22)), ("Modifier", "percent", (0.5, 1, 0.5, 0))]),
    ("Defence", "Damage reduction", "Fortitude", "Defence", [("Modifier", "percent", (0.1, 7, 35, 0))]),
    ("Evade", "Chance to dodge", "Reflexes", "Defence", [("Chance", "percent", (0.1, 10, 15, 0))]),
    ("Parry", "Chance to parry", "Reflexes", "Defence", [("Chance", "percent", (0.2, 15, 15, 0))]),
    ("Riposte", "Chance to riposte", "Agility", "Defence", [("Chance", "percent", (0.3, 20, 15, 0))]),
    ("Block", "Ability to block if a shield is equipped", "Strength", "Defence", [("Chance", "percent", (0.25, 25, 60, 0)), ("Modifier", "percent", (2.5, 80, 100, 0))]),
    ("Stealth", "Chance to avoid detection", "Perception", "Stealth", [("Chance", "percent", (0.5, 20, 65, 0))]),
    ("Pickpocketing", "Chance to steal", "Agility", "Stealth", [("Chance", "percent", (0.6, 15, 70, 0))]),
    ("Faith", "Ability to cast spells", "Divinity", "Holiness", [("Modifier", "percent", (2, 10, 5, 0))]),
    ("Bartering", "Chance to negotiate prices", "Charisma", "Diplomacy", [("Chance", "percent", (0.5, 20, 60, 0))]),
    ("Oration", "Ability to speak", "Strength", "Wisdom", [("Modifier", "percent", (0.75, 15, 60, 0))]),
    ("Knowledge", "Ability to understand", "Wisdom", "Diplomacy", [("Modifier", "percent", (0.1, 5, 50, 0))]),
    ("Literacy", "Ability to read", "Wisdom", "Diplomacy", [("Modifier", "percent", (0.25, 10, 75, 0))]),
    ("Luck", "Chance to have things turn your way against all odds", "Fortuity", "Diplomacy", [("Chance", "percent", (0.2, 5, 10, -15))]),
    ("Resist frost", "Ability to resist frost damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist flame", "Ability to resist flame damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist shadow", "Ability to resist shadow damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist holy", "Ability to resist holy damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist poison", "Ability to resist poison damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist blunt", "Ability to resist blunt damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist slashing", "Ability to resist slashing damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))]),
    ("Resist piercing", "Ability to resist piercing damage", "Resilience", "Resistance", [("Modifier", "percent", (1, 50, 100, -15))])
    ]


ALL_PROFICIENCIES = [attrib[0].lower().replace(" ", "_") for attrib in PROFICIENCY_INFORMATION]

class Proficiencies(Base):
    __tablename__ = 'proficiencies'
    
    id = Column(Integer, primary_key=True)

    #Relationships
    health_id = Column(Integer, ForeignKey('proficiency.id'))
    health = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.health_id]")
    sanctity_id = Column(Integer, ForeignKey('proficiency.id'))
    sanctity = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.sanctity_id]")
    storage_id = Column(Integer, ForeignKey('proficiency.id'))
    storage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.storage_id]")
    endurance_id = Column(Integer, ForeignKey('proficiency.id'))
    endurance = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.endurance_id]")
    attack_damage_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_damage = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_damage_id]")
    attack_speed_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_speed = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_speed_id]")
    attack_accuracy_id = Column(Integer, ForeignKey('proficiency.id'))
    attack_accuracy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.attack_accuracy_id]")
    first_strike_id = Column(Integer, ForeignKey('proficiency.id'))
    first_strike = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.first_strike_id]")
    critical_hit_id = Column(Integer, ForeignKey('proficiency.id'))
    critical_hit = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.critical_hit_id]")
    defence_id = Column(Integer, ForeignKey('proficiency.id'))
    defence = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.defence_id]")
    evade_id = Column(Integer, ForeignKey('proficiency.id'))
    evade = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.evade_id]")
    parry_id = Column(Integer, ForeignKey('proficiency.id'))
    parry = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.parry_id]")
    riposte_id = Column(Integer, ForeignKey('proficiency.id'))
    riposte = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.riposte_id]")
    block_id = Column(Integer, ForeignKey('proficiency.id'))
    block = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.block_id]")
    stealth_id = Column(Integer, ForeignKey('proficiency.id'))
    stealth = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.stealth_id]")
    pickpocketing_id = Column(Integer, ForeignKey('proficiency.id'))
    pickpocketing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.pickpocketing_id]")
    faith_id = Column(Integer, ForeignKey('proficiency.id'))
    faith = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.faith_id]")
    bartering_id = Column(Integer, ForeignKey('proficiency.id'))
    bartering = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.bartering_id]")
    oration_id = Column(Integer, ForeignKey('proficiency.id'))
    oration = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.oration_id]")
    knowledge_id = Column(Integer, ForeignKey('proficiency.id'))
    knowledge = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.knowledge_id]")
    literacy_id = Column(Integer, ForeignKey('proficiency.id'))
    literacy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.literacy_id]")
    luck_id = Column(Integer, ForeignKey('proficiency.id'))
    luck = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.luck_id]")
    resist_frost_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_frost = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_frost_id]")
    resist_flame_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_flame = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_flame_id]")
    resist_shadow_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_shadow = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_shadow_id]")
    resist_holy_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_holy = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_holy_id]")
    resist_poison_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_poison = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_poison_id]")
    resist_blunt_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_blunt = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_blunt_id]")
    resist_slashing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_slashing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_slashing_id]")
    resist_piercing_id = Column(Integer, ForeignKey('proficiency.id'))
    resist_piercing = relationship("Proficiency", uselist=False, foreign_keys="[Proficiencies.resist_piercing_id]")
    
    def __init__(self):
        
        self.health = Health("Health", "How much you can take before you die", "Vitality", "Offense")
        self.sanctity = Sanctity("Sanctity", "Casting points", "Divinity", "Offense")
        self.storage = Storage("Storage", "Carrying capacity", "Strength", "Offense")
        self.endurance = Endurance("Endurance", "Actions performed each day", "Fortitude", "Offense")
        self.attack_damage = AttackDamage("Attack damage", "How hard you hit", "Strength", "Offense")
        self.attack_speed = AttackSpeed("Attack speed", "How fast you attack", "Agility", "Offense")
        self.attack_accuracy = AttackAccuracy("Attack accuracy", "Chance to hit", "Agility", "Offense")
        self.first_strike = FirstStrike("First strike", "Chance to strike first", "Agility", "Offense")
        self.critical_hit = CriticalHit("Critical hit", "Ability to hit your enemy's weakspots", "Perception", "Offense")
        self.defence = Defence("Defence", "Damage reduction", "Fortitude", "Defence")
        self.evade = Evade("Evade", "Chance to dodge", "Reflexes", "Defence")
        self.parry = Parry("Parry", "Chance to parry", "Reflexes", "Defence")
        self.riposte = Riposte("Riposte", "Chance to riposte", "Agility", "Defence")
        self.block = Block("Block", "Ability to block if a shield is equipped", "Strength", "Defence")
        self.stealth = Stealth("Stealth", "Chance to avoid detection", "Perception", "Stealth")
        self.pickpocketing = Pickpocketing("Pickpocketing", "Chance to steal", "Agility", "Stealth")
        self.faith = Faith("Faith", "Ability to cast spells", "Divinity", "Holiness")
        self.bartering = Bartering("Bartering", "Chance to negotiate prices", "Charisma", "Diplomacy")
        self.oration = Oration("Oration", "Ability to speak", "Strength", "Wisdom")
        self.knowledge = Knowledge("Knowledge", "Ability to understand", "Wisdom", "Diplomacy")
        self.literacy = Literacy("Literacy", "Ability to read", "Wisdom", "Diplomacy")
        self.luck = Luck("Luck", "Chance to have things turn your way against all odds", "Fortuity", "Diplomacy")
        self.resist_frost = ResistFrost("Resist frost", "Ability to resist frost damage", "Resilience", "Resistance")
        self.resist_flame = ResistFlame("Resist flame", "Ability to resist flame damage", "Resilience", "Resistance")
        self.resist_shadow = ResistShadow("Resist shadow", "Ability to resist shadow damage", "Resilience", "Resistance")
        self.resist_holy = ResistHoly("Resist holy", "Ability to resist holy damage", "Resilience", "Resistance")
        self.resist_poison = ResistPoison("Resist poison", "Ability to resist poison damage", "Resilience", "Resistance")
        self.resist_blunt = ResistBlunt("Resist blunt", "Ability to resist blunt damage", "Resilience", "Resistance")
        self.resist_slashing = ResistSlashing("Resist slashing", "Ability to resist slashing damage", "Resilience", "Resistance")
        self.resist_piercing = ResistPiercing("Resist piercing", "Ability to resist piercing damage", "Resilience", "Resistance")
        

    def items(self):
        """Returns a list of 2-tuples

        Basically a dict.items() clone that looks like ([(key, value), (key, value), ...])
        """
        return ((key, getattr(self, key)) for key in ALL_PROFICIENCIES)
        
        
    def __iter__(self):
        return (getattr(self, key) for key in ALL_PROFICIENCIES)

        
class Proficiency(Base):
    """Proficiency class that stores data about a hero object.
    """
    __tablename__ = "proficiency"
    
    id = Column(Integer, primary_key=True)

    name = Column(String)
    description = Column(String)
    tooltip = Column(String)
    attribute_type = Column(String)
    type = Column(String)
    level = Column(Integer)
    next_value = Column(Integer)
    is_not_max_level = Column(Boolean)
    
    _class = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Proficiency",
        'polymorphic_on':_class
    }

    def __init__(self, name, description, attribute_type, type):
        self.name = name
        self.description = description
        self.attribute_type = attribute_type
        self.type = type
        self.tooltip = ""
        
        self.level = 1
        self.is_not_max_level = False

    def level_up(self):
        self.level += 1


class Health(Proficiency):
    __tablename__ = "health"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Health",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.error = "You do not have enough vitality"
        self.formatted_name = "health"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.vitality.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = 5*self.level + 0
        self.tooltip += "Maximum: " + str(self.maximum) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Sanctity(Proficiency):
    __tablename__ = "sanctity"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Sanctity",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.error = "You do not have enough divinity"
        self.formatted_name = "sanctity"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.divinity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = 1.5*self.level + -1
        self.tooltip += "Maximum: " + str(self.maximum) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Storage(Proficiency):
    __tablename__ = "storage"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Storage",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.error = "You do not have enough strength"
        self.formatted_name = "storage"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = 2.5*self.level + 8
        self.tooltip += "Maximum: " + str(self.maximum) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Endurance(Proficiency):
    __tablename__ = "endurance"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    maximum = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Endurance",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maximum = 0
        self.error = "You do not have enough fortitude"
        self.formatted_name = "endurance"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.fortitude.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.maximum = 0.25*self.level + 5
        self.tooltip += "Maximum: " + str(self.maximum) + ";"
        self.tooltip = self.tooltip[:-1]
        

class AttackDamage(Proficiency):
    __tablename__ = "attack_damage"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    minimum = Column(Integer)
    maximum = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"AttackDamage",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.minimum = 0
        self.maximum = 0
        self.error = "You do not have enough strength"
        self.formatted_name = "attack_damage"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.minimum = math.floor(math.floor(3 * (0.5*math.sin(0.1*self.level) + 0.1*self.level)) + 0)
        self.tooltip += "Minimum: " + str(self.minimum) + ";"
        self.maximum = math.floor(math.floor(3 * (0.5*math.sin(0.1*self.level) + 0.2*self.level)) + 1)
        self.tooltip += "Maximum: " + str(self.maximum) + ";"
        self.tooltip = self.tooltip[:-1]
        

class AttackSpeed(Proficiency):
    __tablename__ = "attack_speed"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    speed = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"AttackSpeed",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.speed = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "attack_speed"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.speed = round((3 * (0.1*math.sin(0.7*self.level) + 0.1*self.level)) + 1, 2)
        self.tooltip += "Speed: " + str(self.speed) + ";"
        self.tooltip = self.tooltip[:-1]
        

class AttackAccuracy(Proficiency):
    __tablename__ = "attack_accuracy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    accuracy = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"AttackAccuracy",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.accuracy = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "attack_accuracy"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.accuracy = math.floor((- (10*5)/((2 * self.level) + 10) + 5) * 7.9 + 5)
        self.tooltip += "Accuracy: " + str(self.accuracy) + ";"
        self.tooltip = self.tooltip[:-1]
        

class FirstStrike(Proficiency):
    __tablename__ = "first_strike"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"FirstStrike",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "first_strike"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (5*50)/((0.5 * self.level) + 5) + 50) * 7.9 + 0)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.tooltip = self.tooltip[:-1]
        

class CriticalHit(Proficiency):
    __tablename__ = "critical_hit"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"CriticalHit",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.modifier = 0
        self.error = "You do not have enough perception"
        self.formatted_name = "critical_hit"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.perception.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (5*50)/((0.3 * self.level) + 5) + 50) * 7.9 + -22)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.modifier = math.floor((- (1*0.5)/((0.5 * self.level) + 1) + 0.5) * 7.9 + 0)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Defence(Proficiency):
    __tablename__ = "defence"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Defence",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough fortitude"
        self.formatted_name = "defence"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.fortitude.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (7*35)/((0.1 * self.level) + 7) + 35) * 7.9 + 0)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Evade(Proficiency):
    __tablename__ = "evade"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Evade",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough reflexes"
        self.formatted_name = "evade"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.reflexes.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (10*15)/((0.1 * self.level) + 10) + 15) * 7.9 + 0)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Parry(Proficiency):
    __tablename__ = "parry"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Parry",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough reflexes"
        self.formatted_name = "parry"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.reflexes.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (15*15)/((0.2 * self.level) + 15) + 15) * 7.9 + 0)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Riposte(Proficiency):
    __tablename__ = "riposte"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Riposte",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "riposte"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (20*15)/((0.3 * self.level) + 20) + 15) * 7.9 + 0)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Block(Proficiency):
    __tablename__ = "block"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Block",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.modifier = 0
        self.error = "You do not have enough strength"
        self.formatted_name = "block"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (25*60)/((0.25 * self.level) + 25) + 60) * 7.9 + 0)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.modifier = math.floor((- (80*100)/((2.5 * self.level) + 80) + 100) * 7.9 + 0)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Stealth(Proficiency):
    __tablename__ = "stealth"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Stealth",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough perception"
        self.formatted_name = "stealth"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.perception.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (20*65)/((0.5 * self.level) + 20) + 65) * 7.9 + 0)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Pickpocketing(Proficiency):
    __tablename__ = "pickpocketing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Pickpocketing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough agility"
        self.formatted_name = "pickpocketing"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.agility.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (15*70)/((0.6 * self.level) + 15) + 70) * 7.9 + 0)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Faith(Proficiency):
    __tablename__ = "faith"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Faith",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough divinity"
        self.formatted_name = "faith"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.divinity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (10*5)/((2 * self.level) + 10) + 5) * 7.9 + 0)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Bartering(Proficiency):
    __tablename__ = "bartering"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Bartering",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough charisma"
        self.formatted_name = "bartering"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.charisma.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (20*60)/((0.5 * self.level) + 20) + 60) * 7.9 + 0)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Oration(Proficiency):
    __tablename__ = "oration"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Oration",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough strength"
        self.formatted_name = "oration"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.strength.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (15*60)/((0.75 * self.level) + 15) + 60) * 7.9 + 0)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Knowledge(Proficiency):
    __tablename__ = "knowledge"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Knowledge",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough wisdom"
        self.formatted_name = "knowledge"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.wisdom.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (5*50)/((0.1 * self.level) + 5) + 50) * 7.9 + 0)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Literacy(Proficiency):
    __tablename__ = "literacy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Literacy",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough wisdom"
        self.formatted_name = "literacy"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.wisdom.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (10*75)/((0.25 * self.level) + 10) + 75) * 7.9 + 0)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class Luck(Proficiency):
    __tablename__ = "luck"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    chance = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"Luck",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.chance = 0
        self.error = "You do not have enough fortuity"
        self.formatted_name = "luck"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.fortuity.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.chance = math.floor((- (5*10)/((0.2 * self.level) + 5) + 10) * 7.9 + -15)
        self.tooltip += "Chance: " + str(self.chance) + ";"
        self.tooltip = self.tooltip[:-1]
        

class ResistFrost(Proficiency):
    __tablename__ = "resist_frost"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistFrost",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_frost"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class ResistFlame(Proficiency):
    __tablename__ = "resist_flame"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistFlame",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_flame"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class ResistShadow(Proficiency):
    __tablename__ = "resist_shadow"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistShadow",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_shadow"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class ResistHoly(Proficiency):
    __tablename__ = "resist_holy"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistHoly",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_holy"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class ResistPoison(Proficiency):
    __tablename__ = "resist_poison"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistPoison",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_poison"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class ResistBlunt(Proficiency):
    __tablename__ = "resist_blunt"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistBlunt",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_blunt"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class ResistSlashing(Proficiency):
    __tablename__ = "resist_slashing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistSlashing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_slashing"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        

class ResistPiercing(Proficiency):
    __tablename__ = "resist_piercing"

    id = Column(Integer, ForeignKey("proficiency.id"), primary_key=True)

    modifier = Column(Integer)
    
    error = Column(String)
    formatted_name = Column(String)
    __mapper_args__ = {
        'polymorphic_identity':"ResistPiercing",
}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.modifier = 0
        self.error = "You do not have enough resilience"
        self.formatted_name = "resist_piercing"
        
    def update(self, myHero):
        self.tooltip = ""
        if self.level < myHero.attributes.resilience.level // 2:
            self.is_not_max_level = True
        else:
            self.is_not_max_level = False
        self.modifier = math.floor((- (50*100)/((1 * self.level) + 50) + 100) * 7.9 + -15)
        self.tooltip += "Modifier: " + str(self.modifier) + ";"
        self.tooltip = self.tooltip[:-1]
        


    # Do I need this? Is this related to my bug? :'(
    """
    def __iter__(self):
        pass
    """


#//////////////////////////////////////////////////////////////////////////////#
#                                                                              #
#  Author: Elthran B, Jimmy Zhang                                              #
#  Email : jimmy.gnahz@gmail.com                                               #
#                                                                              #
#//////////////////////////////////////////////////////////////////////////////#

"""All secondary functions are determined in this file. They follow the same pattern:
    - Set up the ratio of attributes
    - Scale the attribute
    - (Optional) Round the decimal place if needed
    That way you can easily either adjust the ratio or you can adjust the scaling!

    y = -(10c / (ax + 10)) + c  => the smaller a is, the slower it reaches the cap, c
    y = a sin(cx) + bx  => where b is slope, a is steepness, and c is frequency

    """

import math

def update_minimum_damage(myHero):
    """ Minimum amount of damage you can do when hitting an opponent """
    minimum_damage = (5 * myHero.attributes.strength.level) + (1 * myHero.attributes.agility.level)
    minimum_damage = 0.1 * math.sin(minimum_damage) + 0.2 * minimum_damage
    minimum_damage = math.floor(minimum_damage)
    return minimum_damage

def update_maximum_damage(myHero):
    """ Maximum amount of damage you can do when hitting an opponent """
    maximum_damage = (1 * myHero.attributes.strength.level) + (4 * myHero.attributes.agility.level)
    maximum_damage = 0.2 * math.sin(maximum_damage) + 0.3 * maximum_damage + update_minimum_damage(myHero)
    maximum_damage = math.floor(maximum_damage)
    return maximum_damage

def update_attack_speed(myHero):
    """ Not sure yet. """
    attack_speed = (7 * myHero.attributes.agility.level) + (2 * myHero.attributes.reflexes.level)
    attack_speed = - (10 / (attack_speed * 0.006 + 10)) + 1
    attack_speed = round(attack_speed, 2)
    return attack_speed

def update_attack_accuracy(myHero):
    """ Chance of successfully hitting an enemy in combat """
    attack_accuracy = (8 * myHero.attributes.agility.level) + (3 * myHero.attributes.reflexes.level) + (1 * myHero.attributes.perception.level)
    attack_accuracy = - (500 / (attack_accuracy * 0.08 + 10)) + 50
    attack_accuracy = math.floor(attack_accuracy)
    return attack_accuracy

def update_first_strike_chance(myHero):
    """ Not sure yet. """
    first_strike_chance = (5 * myHero.attributes.agility.level) + (2 * myHero.attributes.reflexes.level)
    first_strike_chance = - (300 / (first_strike_chance * 0.07 + 10)) + 30
    first_strike_chance = math.floor(first_strike_chance)
    return first_strike_chance

def update_critical_hit_chance(myHero):
    """ Chance of hitting the enemy in a critical location, causing bonus damage """
    critical_hit_chance = (7 * myHero.attributes.agility.level) + (2 * myHero.attributes.perception.level)
    critical_hit_chance = - (300 / (critical_hit_chance * 0.07 + 10)) + 30
    critical_hit_chance = math.floor(critical_hit_chance)
    return critical_hit_chance

def update_critical_hit_modifier(myHero):
    """ How much extra damage you do when you critical hit """
    critical_hit_modifier = (1 * update_maximum_damage(myHero)) + (5 * myHero.attributes.agility.level)
    critical_hit_modifier = 0.05 * math.sin(critical_hit_modifier) + 0.007 * critical_hit_modifier + 1
    critical_hit_modifier = round(critical_hit_modifier, 1)
    return critical_hit_modifier

def update_defence_modifier(myHero):
    """ The % of damage reduced when hit """
    defence_modifier = (6 * myHero.attributes.resilience.level)
    defence_modifier = - (350 / (defence_modifier * 0.09 + 10)) + 35
    defence_modifier = math.floor(defence_modifier)
    return defence_modifier

def update_evade_chance(myHero):
    """ Chance to dodge an attack in combat """
    evade_chance = (5 * myHero.attributes.reflexes.level) + (2 * myHero.attributes.perception.level)
    evade_chance = - (250 / (evade_chance * 0.08 + 10)) + 25
    evade_chance = math.floor(evade_chance)
    return evade_chance

def update_parry_chance(myHero):
    """ Chance to parry when fighting with a weapon """
    parry_chance = (5 * myHero.attributes.reflexes.level) + (1 * myHero.attributes.agility.level) + (3 * myHero.attributes.perception.level)
    parry_chance = - (400 / (parry_chance * 0.1 + 10)) + 40
    parry_chance = math.floor(parry_chance)
    return parry_chance

def update_riposte_chance(myHero):
    """ Chance of counter attacking after a successful parry """
    riposte_chance = (5 * myHero.attributes.agility.level) + (3 * myHero.attributes.perception.level) + (1 * myHero.attributes.reflexes.level)
    riposte_chance = - (400 / (riposte_chance * 0.1 + 10)) + 40
    riposte_chance = math.floor(riposte_chance)
    return riposte_chance

def update_block_chance(myHero):
    """ Chance to blck when using a shield """
    block_chance = (5 * myHero.attributes.reflexes.level) + (3 * myHero.attributes.agility.level) + (2 * myHero.attributes.strength.level)
    block_chance = - (400 / (block_chance * 0.08 + 10)) + 40
    block_chance = math.floor(block_chance)
    return block_chance

def update_block_reduction(myHero):
    """ Percent of damage reduced when you successfully block """
    block_reduction = (2 * myHero.attributes.strength.level) + (2 * myHero.attributes.resilience.level)
    block_reduction = - (400 / (block_reduction * 0.08 + 10)) + 40
    block_reduction = math.floor(block_reduction)
    return block_reduction

def update_stealth_skill(myHero):
    """ Chance of being undetected """
    stealth_skill = (5 * myHero.attributes.reflexes.level) + (3 * myHero.attributes.perception.level) + (2 * myHero.attributes.agility.level)
    stealth_skill = - (250 / (stealth_skill * 0.05 + 10)) + 25
    stealth_skill = math.floor(stealth_skill)
    return stealth_skill

def update_faith(myHero):
    """ Spell Power/Damage """
    faith = (5 * myHero.attributes.divinity.level) + (1 * myHero.attributes.wisdom.level)
    faith = 0.1 * math.sin(faith) + 0.2 * faith
    faith = math.floor(faith)
    return faith

def update_bartering(myHero):
    """ A modifier to the price you pay at stores """
    bartering = (9 * myHero.attributes.charisma.level) + (1 * myHero.attributes.wisdom.level)
    bartering = - (250 / (bartering * 0.05 + 10)) + 25
    bartering = math.floor(bartering)
    return bartering

def update_oration(myHero):
    """ Determines success rate of dialogue as well as which dialogue options are open to you """
    oration = (5 * myHero.attributes.charisma.level) + (3 * myHero.attributes.wisdom.level)
    oration = - (250 / (oration * 0.05 + 10)) + 25
    oration = math.floor(oration)
    return oration

def update_knowledge(myHero):
    """ Determines how much your character knows about the world """
    knowledge = (10 * myHero.attributes.wisdom.level) + (1 * myHero.attributes.perception.level)
    knowledge = 0.1 * math.sin(knowledge) + 0.2 * knowledge
    knowledge = math.floor(knowledge)
    return knowledge

def update_luck_chance(myHero):
    """ This can be applied to almost anything in the game. Chance for a really lucky outcome """
    luck_chance = (5 * myHero.attributes.fortuity.level)
    luck_chance = - (50 / (luck_chance * 0.01 + 10)) + 5
    luck_chance = math.floor(luck_chance)
    return luck_chance

def update_sanctity_maximum(myHero):
    """ Basically your mana. Required to cast spells and use abilities. Should slowly recover over time. """
    sanctity_maximum = (5 * myHero.attributes.divinity.level) + (1 * myHero.attributes.wisdom.level) + 3
    sanctity_maximum = 0.1 * math.sin(sanctity_maximum) + 0.2 * sanctity_maximum
    sanctity_maximum = math.floor(sanctity_maximum)
    return sanctity_maximum

def update_health_maximum(myHero):
    """ How much health your Hero has. At zero, you die. """
    maximum_health = (10 * myHero.attributes.vitality.level) + (2 * myHero.attributes.resilience.level) + (1 * myHero.attributes.strength.level) + 10
    maximum_health = 0.1 * math.sin(maximum_health) + 0.25 * maximum_health
    maximum_health = math.floor(maximum_health)
    return maximum_health

def update_endurance_maximum(myHero):
    """ How many actions you can perform, such as moving on the map or fighting. It slowly recovers over time. """
    endurance_maximum = (5 * myHero.attributes.fortitude.level) + (1 * myHero.attributes.resilience.level) + (1 * myHero.attributes.strength.level) + 25
    endurance_maximum = 0.1 * math.sin(endurance_maximum) + 0.05 * endurance_maximum + 4
    endurance_maximum = math.floor(endurance_maximum)
    return endurance_maximum

def update_storage_maximum(myHero):
    """ How much you can carry in your inventory + items equipped. """
    storage_maximum = (5 * myHero.attributes.strength.level) + (4 * myHero.attributes.resilience.level)
    storage_maximum = 0.1 * math.sin(storage_maximum) + 0.08 * storage_maximum
    storage_maximum = math.floor(storage_maximum)
    return storage_maximum





# BELOW HERE ARE THE MONSTER SECONDARY ATTRIBUTES

def update_monster_minimum_damage(monster):
    """ Minimum amount of damage you can do when hitting an opponent """
    minimum_damage = (5 * monster.primary_attributes["Strength"]) + (1 * monster.primary_attributes["Agility"])
    minimum_damage = 0.02 * math.sin(minimum_damage) + 0.1 * minimum_damage
    minimum_damage = math.floor(minimum_damage)
    return minimum_damage

def update_monster_maximum_damage(monster):
    """ Maximum amount of damage you can do when hitting an opponent """
    maximum_damage = (1 * monster.primary_attributes["Strength"]) + (4 * monster.primary_attributes["Agility"])
    maximum_damage = 0.05 * math.sin(maximum_damage) + 0.125 * maximum_damage + update_monster_minimum_damage(monster)
    maximum_damage = math.floor(maximum_damage)
    return maximum_damage

def update_monster_attack_speed(monster):
    """ Not sure yet. """
    attack_speed = (7 * monster.primary_attributes["Agility"]) + (2 * monster.primary_attributes["Reflexes"])
    attack_speed = - (10 / (attack_speed * 0.006 + 10)) + 1
    attack_speed = round(attack_speed, 2)
    return attack_speed

def update_monster_attack_accuracy(monster):
    """ Chance of successfully hitting an enemy in combat """
    attack_accuracy = (8 * monster.primary_attributes["Agility"]) + (3 * monster.primary_attributes["Reflexes"]) + (1 * monster.primary_attributes["Perception"])
    attack_accuracy = - (500 / (attack_accuracy * 0.05 + 10)) + 50
    attack_accuracy = math.floor(attack_accuracy)
    return attack_accuracy

def update_monster_first_strike_chance(monster):
    """ Not sure yet. """
    first_strike_chance = (5 * monster.primary_attributes["Agility"]) + (2 * monster.primary_attributes["Reflexes"])
    first_strike_chance = - (300 / (first_strike_chance * 0.07 + 10)) + 30
    first_strike_chance = math.floor(first_strike_chance)
    return first_strike_chance

def update_monster_critical_hit_chance(monster):
    """ Chance of hitting the enemy in a critical location, causing bonus damage """
    critical_hit_chance = (7 * monster.primary_attributes["Agility"]) + (2 * monster.primary_attributes["Perception"])
    critical_hit_chance = - (300 / (critical_hit_chance * 0.07 + 10)) + 30
    critical_hit_chance = math.floor(critical_hit_chance)
    return critical_hit_chance

def update_monster_critical_hit_modifier(monster):
    """ How much extra damage you do when you critical hit """
    critical_hit_modifier = (1 * update_monster_maximum_damage(monster)) + (5 * monster.primary_attributes["Agility"])
    critical_hit_modifier = 0.05 * math.sin(critical_hit_modifier) + 0.007 * critical_hit_modifier + 1
    critical_hit_modifier = round(critical_hit_modifier, 1)
    return critical_hit_modifier

def update_monster_defence_modifier(monster):
    """ The % of damage reduced when hit """
    defence_modifier = (6 * monster.primary_attributes["Resilience"])
    defence_modifier = - (350 / (defence_modifier * 0.09 + 10)) + 35
    defence_modifier = math.floor(defence_modifier)
    return defence_modifier

def update_monster_evade_chance(monster):
    """ Chance to dodge an attack in combat """
    evade_chance = (5 * monster.primary_attributes["Reflexes"]) + (2 * monster.primary_attributes["Perception"])
    evade_chance = - (250 / (evade_chance * 0.08 + 10)) + 25
    evade_chance = math.floor(evade_chance)
    return evade_chance

def update_monster_parry_chance(monster):
    """ Chance to parry when fighting with a weapon """
    parry_chance = (5 * monster.primary_attributes["Reflexes"]) + (1 * monster.primary_attributes["Agility"]) + (3 * monster.primary_attributes["Perception"])
    parry_chance = - (400 / (parry_chance * 0.1 + 10)) + 40
    parry_chance = math.floor(parry_chance)
    return parry_chance

def update_monster_riposte_chance(monster):
    """ Chance of counter attacking after a successful parry """
    riposte_chance = (5 * monster.primary_attributes["Agility"]) + (3 * monster.primary_attributes["Perception"]) + (1 * monster.primary_attributes["Reflexes"])
    riposte_chance = - (400 / (riposte_chance * 0.1 + 10)) + 40
    riposte_chance = math.floor(riposte_chance)
    return riposte_chance

def update_monster_block_chance(monster):
    """ Chance to blck when using a shield """
    block_chance = (5 * monster.primary_attributes["Reflexes"]) + (3 * monster.primary_attributes["Agility"]) + (2 * monster.primary_attributes["Strength"])
    block_chance = - (400 / (block_chance * 0.08 + 10)) + 40
    block_chance = math.floor(block_chance)
    return block_chance

def update_monster_block_reduction(monster):
    """ Percent of damage reduced when you successfully block """
    block_reduction = (2 * monster.primary_attributes["Strength"]) + (2 * monster.primary_attributes["Resilience"])
    block_reduction = block_reduction ** 0.75
    block_reduction = math.floor(block_reduction)
    return block_reduction

def update_monster_stealth_skill(monster):
    """ Chance of being undetected """
    stealth_skill = (5 * monster.primary_attributes["Reflexes"]) + (3 * monster.primary_attributes["Perception"]) + (2 * monster.primary_attributes["Agility"])
    stealth_skill = - (250 / (stealth_skill * 0.05 + 10)) + 25
    stealth_skill = math.floor(stealth_skill)
    return stealth_skill

def update_monster_faith(monster):
    """ Spell Power/Damage """
    faith = (5 * monster.primary_attributes["Divinity"]) + (1 * monster.primary_attributes["Wisdom"])
    faith = (0.2 * faith) ** 0.9
    faith = math.floor(faith)
    return faith

def update_monster_luck_chance(monster):
    """ This can be applied to almost anything in the game. Chance for a really lucky outcome """
    luck_chance = (5 * monster.primary_attributes["Fortuity"])
    luck_chance = - (50 / (luck_chance * 0.01 + 10)) + 5
    luck_chance = math.floor(luck_chance)
    return luck_chance

def update_monster_sanctity_maximum(monster):
    """ Basically your mana. Required to cast spells and use abilities. Should slowly recover over time. """
    sanctity_maximum = (5 * monster.primary_attributes["Divinity"]) + (1 * monster.primary_attributes["Wisdom"]) + 3
    sanctity_maximum = (0.8 * sanctity_maximum) ** 0.9
    sanctity_maximum = math.floor(sanctity_maximum)
    return sanctity_maximum

def update_monster_health_maximum(monster):
    """ How much health your Hero has. At zero, you die. """
    health_maximum = (10 * monster.primary_attributes["Vitality"]) + (2 * monster.primary_attributes["Resilience"]) + (1 * monster.primary_attributes["Strength"]) + 10
    health_maximum = 0.1 * math.sin(health_maximum) + 0.1 * health_maximum
    health_maximum = math.floor(health_maximum)
    return health_maximum

